# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is autogenerated.
apiVersion: v1
kind: Namespace
metadata:
  name: gmp-system
---
apiVersion: v1
kind: Namespace
metadata:
  name: gmp-public
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: gmp-critical
description: Used for GMP collector pods.
value: 1000000000
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: gmp-system
  name: collector
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: gmp-system
  name: operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: gmp-system:collector
rules:
- apiGroups: [""]
  resources:
  - endpoints
  - nodes
  - nodes/metrics
  - pods
  - services
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: gmp-system
  name: operator
rules:
- apiGroups: [""]
  resources:
  - secrets
  verbs: ["list", "watch", "create"]
- apiGroups: [""]
  resources:
  - secrets
  resourceNames: ["collection", "rules", "alertmanager"]
  verbs: ["get", "patch", "update"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["list", "watch", "create"]
- apiGroups: [""]
  resources:
  - configmaps
  resourceNames: ["collector", "rule-evaluator", "rules-generated"]
  verbs: ["get", "patch", "update"]
- apiGroups: ["apps"]
  resources:
  - daemonsets
  resourceNames: ["collector"]
  verbs: ["get", "list", "watch", "delete", "patch", "update"]
- apiGroups: ["apps"]
  resources:
  - deployments
  verbs: ["list", "watch"]
- apiGroups: ["apps"]
  resources:
  - deployments
  resourceNames: ["rule-evaluator"]
  verbs: ["get", "delete", "patch", "update"]
- apiGroups: [""]
  resources:
  - services
  resourceNames: ["alertmanager"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: gmp-public
  name: operator
rules:
- apiGroups: [""]
  resources:
  - secrets
  verbs: ["get", "list", "watch"]
- apiGroups: ["monitoring.googleapis.com"]
  resources:
  - operatorconfigs
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: gmp-system:operator
rules:
- apiGroups: ["admissionregistration.k8s.io"]
  resources:
  - validatingwebhookconfigurations
  - mutatingwebhookconfigurations
  resourceNames:
  - gmp-operator.gmp-system.monitoring.googleapis.com
  verbs: ["get", "list", "patch", "update", "watch"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources:
  - validatingwebhookconfigurations
  - mutatingwebhookconfigurations
  resourceNames:
  - gmp-operator
  verbs: ["delete"]
- apiGroups: ["monitoring.googleapis.com"]
  resources:
  - clusterpodmonitorings
  - clusterrules
  - globalrules
  - podmonitorings
  - rules
  verbs: ["get", "list", "watch"]
- apiGroups: ["monitoring.googleapis.com"]
  resources:
  - clusterpodmonitorings/status
  - clusterrules/status
  - globalrules/status
  - podmonitorings/status
  - rules/status
  verbs: ["get", "patch", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: gmp-system:operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gmp-system:operator
subjects:
- kind: ServiceAccount
  namespace: gmp-system
  name: operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: gmp-public
  name: operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: operator
subjects:
- kind: ServiceAccount
  namespace: gmp-system
  name: operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: gmp-system
  name: operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: operator
subjects:
- kind: ServiceAccount
  name: operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: gmp-system:collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gmp-system:collector
subjects:
- kind: ServiceAccount
  namespace: gmp-system
  name: collector
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: gmp-system
  name: gmp-operator
  labels:
    app: managed-prometheus-operator
    app.kubernetes.io/name: gmp-operator
    app.kubernetes.io/component: operator
    app.kubernetes.io/part-of: gmp
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: gmp-operator
      app.kubernetes.io/component: operator
      app.kubernetes.io/part-of: gmp
  template:
    metadata:
      labels:
        app: managed-prometheus-operator
        app.kubernetes.io/name: gmp-operator
        app.kubernetes.io/component: operator
        app.kubernetes.io/part-of: gmp
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - arm64
                - amd64
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      serviceAccountName: operator
      automountServiceAccountToken: true
      containers:
      - name: operator
        image: gke.gcr.io/prometheus-engine/operator:v0.5.0-gke.0
        args:
        - "--operator-namespace=gmp-system"
        - "--public-namespace=gmp-public"
        - "--webhook-addr=:10250"
        ports:
        - name: web
          # Note this should match the --listen-addr flag passed in to the operator args.
          # Default is 10250.
          containerPort: 10250
        - name: metrics
          # Note this should match the --metrics-addr flag passed in to the operator args.
          # Default is 18080.
          containerPort: 18080
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          capabilities:
            drop:
            - all
          runAsUser: 1000
          runAsGroup: 1000
          runAsNonRoot: true
      priorityClassName: gmp-critical
      tolerations:
      - effect: NoExecute
        operator: Exists
      - effect: NoSchedule
        operator: Exists
      # TODO(TheSpiritXIII): GKE Autopilot Bug: catch-all toleration is not detected.
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "amd64"
        effect: "NoSchedule"
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "arm64"
        effect: "NoSchedule"
      securityContext:
        seccompProfile:
          type: RuntimeDefault
---
apiVersion: v1
kind: Service
metadata:
  namespace: gmp-system
  name: gmp-operator
spec:
  selector:
    app.kubernetes.io/name: gmp-operator
    app.kubernetes.io/component: operator
    app.kubernetes.io/part-of: gmp
  ports:
  # This port does not do anything, but allows upgrades in the case
  # of server-side apply (SSA) conflicts.
  # TODO(pintohutch): remove once the SSA issues from upgrades are resolved.
  - protocol: TCP
    port: 8443
    targetPort: webhook
    name: legacy
  - protocol: TCP
    port: 443
    targetPort: web
    name: webhook
---
apiVersion: monitoring.googleapis.com/v1
kind: OperatorConfig
metadata:
  namespace: gmp-public
  name: config
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: gmp-operator.gmp-system.monitoring.googleapis.com
webhooks:
- name: validate.podmonitorings.gmp-operator.gmp-system.monitoring.googleapis.com
  admissionReviewVersions:
  - v1
  clientConfig:
    # caBundle populated by operator.
    service:
      namespace: gmp-system
      name: gmp-operator
      path: /validate/monitoring.googleapis.com/v1/podmonitorings
      port: 443
  failurePolicy: Fail
  sideEffects: None
  rules:
  - apiGroups:
    - monitoring.googleapis.com
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - podmonitorings
- name: validate.clusterpodmonitorings.gmp-operator.gmp-system.monitoring.googleapis.com
  admissionReviewVersions:
  - v1
  clientConfig:
    # caBundle populated by operator.
    service:
      namespace: gmp-system
      name: gmp-operator
      path: /validate/monitoring.googleapis.com/v1/clusterpodmonitorings
      port: 443
  failurePolicy: Fail
  sideEffects: None
  rules:
  - apiGroups:
    - monitoring.googleapis.com
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - clusterpodmonitorings
- name: validate.rules.gmp-operator.gmp-system.monitoring.googleapis.com
  admissionReviewVersions:
  - v1
  clientConfig:
    # caBundle populated by operator.
    service:
      namespace: gmp-system
      name: gmp-operator
      path: /validate/monitoring.googleapis.com/v1/rules
      port: 443
  failurePolicy: Fail
  sideEffects: None
  rules:
  - apiGroups:
    - monitoring.googleapis.com
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - rules
- name: validate.clusterrules.gmp-operator.gmp-system.monitoring.googleapis.com
  admissionReviewVersions:
  - v1
  clientConfig:
    # caBundle populated by operator.
    service:
      namespace: gmp-system
      name: gmp-operator
      path: /validate/monitoring.googleapis.com/v1/clusterrules
      port: 443
  failurePolicy: Fail
  sideEffects: None
  rules:
  - apiGroups:
    - monitoring.googleapis.com
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - clusterrules
- name: validate.globalrules.gmp-operator.gmp-system.monitoring.googleapis.com
  admissionReviewVersions:
  - v1
  clientConfig:
    # caBundle populated by operator.
    service:
      namespace: gmp-system
      name: gmp-operator
      path: /validate/monitoring.googleapis.com/v1/globalrules
      port: 443
  failurePolicy: Fail
  sideEffects: None
  rules:
  - apiGroups:
    - monitoring.googleapis.com
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - globalrules
- name: validate.operatorconfigs.gmp-operator.gmp-system.monitoring.googleapis.com
  admissionReviewVersions:
  - v1
  clientConfig:
    # caBundle populated by operator.
    service:
      namespace: gmp-system
      name: gmp-operator
      path: /validate/monitoring.googleapis.com/v1/operatorconfigs
      port: 443
  failurePolicy: Fail
  sideEffects: None
  rules:
  - apiGroups:
    - monitoring.googleapis.com
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - operatorconfigs
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: gmp-operator.gmp-system.monitoring.googleapis.com
webhooks:
- name: default.podmonitorings.gmp-operator.gmp-system.monitoring.googleapis.com
  admissionReviewVersions:
  - v1
  clientConfig:
    # caBundle populated by operator.
    service:
      namespace: gmp-system
      name: gmp-operator
      path: /default/monitoring.googleapis.com/v1/podmonitorings
      port: 443
  failurePolicy: Fail
  sideEffects: None
  rules:
  - apiGroups:
    - monitoring.googleapis.com
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - podmonitorings
- name: default.clusterpodmonitorings.gmp-operator.gmp-system.monitoring.googleapis.com
  admissionReviewVersions:
  - v1
  clientConfig:
    # caBundle populated by operator.
    service:
      namespace: gmp-system
      name: gmp-operator
      path: /default/monitoring.googleapis.com/v1/clusterpodmonitorings
      port: 443
  failurePolicy: Fail
  sideEffects: None
  rules:
  - apiGroups:
    - monitoring.googleapis.com
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - clusterpodmonitorings
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: gmp-system
  name: collector
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: collector
  template:
    metadata:
      labels:
        app: managed-prometheus-collector
        app.kubernetes.io/name: collector
      annotations:
        components.gke.io/component-name: managed_prometheus
        # The emptyDir for the storage and config directories prevents cluster
        # autoscaling unless this annotation is set.
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - arm64
                - amd64
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      initContainers:
      - name: config-init
        image: gke.gcr.io/gke-distroless/bash:20220419
        command: ['/bin/bash', '-c', 'touch /prometheus/config_out/config.yaml']
        volumeMounts:
        - name: config-out
          mountPath: /prometheus/config_out
      containers:
      - name: prometheus
        image: gke.gcr.io/prometheus-engine/prometheus:v2.35.0-gmp.2-gke.0
        args:
        - --config.file=/prometheus/config_out/config.yaml
        - --storage.tsdb.path=/prometheus/data
        - --storage.tsdb.no-lockfile
        # Keep 30 minutes of data. As we are backed by an emptyDir volume, this will count towards
        # the containers memory usage. We could lower it further if this becomes problematic, but
        # it the window for local data is quite convenient for debugging.
        - --storage.tsdb.retention.time=30m
        - --storage.tsdb.wal-compression
        # Effectively disable compaction and make blocks short enough so that our retention window
        # can be kept in practice.
        - --storage.tsdb.min-block-duration=10m
        - --storage.tsdb.max-block-duration=10m
        - --web.listen-address=:19090
        - --web.enable-lifecycle
        - --web.route-prefix=/
        - --export.user-agent=prometheus/2.35.0-gmp.2 (mode:kubectl)
        # The environment variable EXTRA_ARGS will be populated by the operator.
        # DO NOT specify it here.
        env:
        - name: GOGC
          value: "25"
        ports:
        - name: prom-metrics
          containerPort: 19090
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 19090
            scheme: HTTP
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 19090
            scheme: HTTP
        resources:
          limits:
            memory: 3G
          requests:
            cpu: 100m
            memory: 200M
        volumeMounts:
        - name: storage
          mountPath: /prometheus/data
        - name: config-out
          mountPath: /prometheus/config_out
          readOnly: true
        - name: collection-secret
          mountPath: /etc/secrets
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          capabilities:
            drop:
            - all
          runAsUser: 1000
          runAsGroup: 1000
          runAsNonRoot: true
      - name: config-reloader
        image: gke.gcr.io/prometheus-engine/config-reloader:v0.5.0-gke.0
        args:
        - --config-file=/prometheus/config/config.yaml
        - --config-file-output=/prometheus/config_out/config.yaml
        - --reload-url=http://localhost:19090/-/reload
        - --listen-address=:19091
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        ports:
        - name: cfg-rel-metrics
          containerPort: 19091
        resources:
          limits:
            memory: 32M
          requests:
            cpu: 5m
            memory: 16M
        volumeMounts:
        - name: config
          mountPath: /prometheus/config
          readOnly: true
        - name: config-out
          mountPath: /prometheus/config_out
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          capabilities:
            drop:
            - all
          runAsUser: 1000
          runAsGroup: 1000
          runAsNonRoot: true
      serviceAccountName: collector
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      automountServiceAccountToken: true
      priorityClassName: gmp-critical
      tolerations:
      - effect: NoExecute
        operator: Exists
      - effect: NoSchedule
        operator: Exists
      # TODO(TheSpiritXIII): GKE Autopilot Bug: catch-all toleration is not detected.
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "amd64"
        effect: "NoSchedule"
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "arm64"
        effect: "NoSchedule"
      volumes:
      - name: storage
        emptyDir: {}
      - name: config
        configMap:
          name: collector
      - name: config-out
        emptyDir: {}
      - name: collection-secret
        secret:
          secretName: collection
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: gmp-system
  name: rule-evaluator
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: rule-evaluator
  replicas: 1
  template:
    metadata:
      labels:
        app: managed-prometheus-rule-evaluator
        app.kubernetes.io/name: rule-evaluator
      annotations:
        components.gke.io/component-name: managed_prometheus
        # The emptyDir for the storage and config directories prevents cluster
        # autoscaling unless this annotation is set.
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - arm64
                - amd64
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      serviceAccountName: collector
      initContainers:
      - name: config-init
        image: gke.gcr.io/gke-distroless/bash:20220419
        command: ['/bin/bash', '-c', 'touch /prometheus/config_out/config.yaml']
        volumeMounts:
        - name: config-out
          mountPath: /prometheus/config_out
      containers:
      - name: evaluator
        image: gke.gcr.io/prometheus-engine/rule-evaluator:v0.5.0-gke.0
        args:
        - --config.file=/prometheus/config_out/config.yaml
        - --web.listen-address=:19092
        - --export.user-agent=rule-evaluator/0.5.0 (mode:kubectl)
        ports:
        - name: r-eval-metrics
          containerPort: 19092
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 19092
            scheme: HTTP
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 19092
            scheme: HTTP
        resources:
          limits:
            memory: 1G
          requests:
            cpu: 100m
            memory: 200M
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          privileged: false
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - name: config-out
          mountPath: /prometheus/config_out
          readOnly: true
        - name: rules
          mountPath: /etc/rules
          readOnly: true
        - name: rules-secret
          mountPath: /etc/secrets
          readOnly: true
      - name: config-reloader
        image: gke.gcr.io/prometheus-engine/config-reloader:v0.5.0-gke.0
        args:
        - --config-file=/prometheus/config/config.yaml
        - --config-file-output=/prometheus/config_out/config.yaml
        - --watched-dir=/etc/rules
        - --watched-dir=/etc/secrets
        - --reload-url=http://localhost:19092/-/reload
        - --listen-address=:19093
        ports:
        - containerPort: 19093
          name: cfg-rel-metrics
        resources:
          limits:
            memory: 32M
          requests:
            cpu: 5m
            memory: 16M
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          privileged: false
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - name: config
          mountPath: /prometheus/config
          readOnly: true
        - name: config-out
          mountPath: /prometheus/config_out
        - name: rules
          mountPath: /etc/rules
          readOnly: true
        - name: rules-secret
          mountPath: /etc/secrets
          readOnly: true
      priorityClassName: gmp-critical
      tolerations:
      - effect: NoExecute
        operator: Exists
      - effect: NoSchedule
        operator: Exists
      # TODO(TheSpiritXIII): GKE Autopilot Bug: catch-all toleration is not detected.
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "amd64"
        effect: "NoSchedule"
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "arm64"
        effect: "NoSchedule"
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: collector
      automountServiceAccountToken: true
      volumes:
      - name: config
        configMap:
          defaultMode: 420
          name: rule-evaluator
      - name: config-out
        emptyDir: {}
      - name: rules
        configMap:
          defaultMode: 420
          name: rules-generated
      - name: rules-secret
        secret:
          defaultMode: 420
          secretName: rules
---
apiVersion: v1
kind: Service
metadata:
  namespace: gmp-system
  name: alertmanager
spec:
  selector:
    app.kubernetes.io/name: alertmanager
  clusterIP: None
  ports:
  - port: 9093
    targetPort: 9093
    name: alertmanager
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: gmp-system
  name: alertmanager
spec:
  selector:
    matchLabels:
      app: managed-prometheus-alertmanager
      app.kubernetes.io/name: alertmanager
  serviceName: alertmanager
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: alertmanager
        app: managed-prometheus-alertmanager
      annotations:
        components.gke.io/component-name: managed_prometheus
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - arm64
                - amd64
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      initContainers:
      - name: config-init
        image: gke.gcr.io/gke-distroless/bash:20220419
        command: ['/bin/bash', '-c', 'touch /alertmanager/config_out/config.yaml && echo -e "receivers:\n  - name: noop\nroute:\n  receiver: noop" > alertmanager/config_out/config.yaml']
        volumeMounts:
        - name: alertmanager-config
          mountPath: /alertmanager/config_out
      containers:
      - name: alertmanager
        image: gke.gcr.io/prometheus-engine/alertmanager:v0.24.0-gmp.0-gke.0
        args:
        - --config.file=/alertmanager/config_out/config.yaml
        - --storage.path=/alertmanager-data
        ports:
        - containerPort: 9093
          name: alertmanager
        resources:
          limits:
            memory: 1G
          requests:
            cpu: 100m
            memory: 200M
        volumeMounts:
        - name: alertmanager-config
          mountPath: /alertmanager/config_out
          readOnly: true
        - name: alertmanager-data
          mountPath: /alertmanager-data
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          privileged: false
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
      - name: config-reloader
        image: gke.gcr.io/prometheus-engine/config-reloader:v0.5.0-gke.0
        args:
        - --config-file=/alertmanager/config.yaml
        - --config-file-output=/alertmanager/config_out/config.yaml
        - --reload-url=http://localhost:9093/-/reload
        - --listen-address=:19091
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        ports:
        - name: cfg-rel-metrics
          containerPort: 19091
        resources:
          limits:
            memory: 32M
          requests:
            cpu: 5m
            memory: 16M
        volumeMounts:
        - name: config
          mountPath: /alertmanager
          readOnly: true
        - name: alertmanager-config
          mountPath: /alertmanager/config_out
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          capabilities:
            drop:
            - all
          runAsUser: 1000
          runAsGroup: 1000
          runAsNonRoot: true
      priorityClassName: gmp-critical
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      tolerations:
      - effect: NoExecute
        operator: Exists
      - effect: NoSchedule
        operator: Exists
      # TODO(TheSpiritXIII): GKE Autopilot Bug: catch-all toleration is not detected.
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "amd64"
        effect: "NoSchedule"
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "arm64"
        effect: "NoSchedule"
      volumes:
      - name: config
        secret:
          secretName: alertmanager
      - name: alertmanager-data
        emptyDir: {}
      - name: alertmanager-config
        emptyDir: {}
