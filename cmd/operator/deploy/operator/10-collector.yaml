# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License. 

apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: gmp-system
  name: collector
spec:
  selector:
    matchLabels:
      # DO NOT MODIFY - label selectors are immutable by the Kubernetes API.
      # see: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/#pod-selector
      app.kubernetes.io/name: collector
  template:
    metadata:
      labels:
        app: managed-prometheus-collector
        app.kubernetes.io/name: collector
      annotations:
        components.gke.io/component-name: managed_prometheus
        # The emptyDir for the storage and config directories prevents cluster
        # autoscaling unless this annotation is set.
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - arm64
                - amd64
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      initContainers:
      - name: config-init
        image: gke.gcr.io/gke-distroless/bash:20220419
        command: ['/bin/bash', '-c', 'touch /prometheus/config_out/config.yaml']
        volumeMounts:
        - name: config-out
          mountPath: /prometheus/config_out
      containers:
      - name: prometheus
        image: gke.gcr.io/prometheus-engine/prometheus:v2.35.0-gmp.2-gke.0
        args:
        - --config.file=/prometheus/config_out/config.yaml
        - --storage.tsdb.path=/prometheus/data
        - --storage.tsdb.no-lockfile
        # Keep 30 minutes of data. As we are backed by an emptyDir volume, this will count towards
        # the containers memory usage. We could lower it further if this becomes problematic, but
        # it the window for local data is quite convenient for debugging.
        - --storage.tsdb.retention.time=30m
        - --storage.tsdb.wal-compression
        # Effectively disable compaction and make blocks short enough so that our retention window
        # can be kept in practice.
        - --storage.tsdb.min-block-duration=10m
        - --storage.tsdb.max-block-duration=10m
        - --web.listen-address=:19090
        - --web.enable-lifecycle
        - --web.route-prefix=/
        - --export.user-agent=prometheus/2.35.0-gmp.2 (mode:kubectl)
        # The environment variable EXTRA_ARGS will be populated by the operator.
        # DO NOT specify it here.
        env:
        - name: GOGC
          value: "25"
        ports:
        - name: prom-metrics
          containerPort: 19090
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 19090
            scheme: HTTP
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 19090
            scheme: HTTP
        resources:
          limits:
            memory: 3G
          requests:
            cpu: 100m
            memory: 200M
        volumeMounts:
        - name: storage
          mountPath: /prometheus/data
        - name: config-out
          mountPath: /prometheus/config_out
          readOnly: true
        - name: collection-secret
          mountPath: /etc/secrets
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          capabilities:
            drop:
            - all
          runAsUser: 1000
          runAsGroup: 1000
          runAsNonRoot: true
      - name: config-reloader
        image: gke.gcr.io/prometheus-engine/config-reloader:v0.5.0-gke.0
        args:
        - --config-file=/prometheus/config/config.yaml
        - --config-file-output=/prometheus/config_out/config.yaml
        - --reload-url=http://localhost:19090/-/reload
        - --listen-address=:19091
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        ports:
        - name: cfg-rel-metrics
          containerPort: 19091
        resources:
          limits:
            memory: 32M
          requests:
            cpu: 5m
            memory: 16M
        volumeMounts:
        - name: config
          mountPath: /prometheus/config
          readOnly: true
        - name: config-out
          mountPath: /prometheus/config_out
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          capabilities:
            drop:
            - all
          runAsUser: 1000
          runAsGroup: 1000
          runAsNonRoot: true
      serviceAccountName: collector
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      automountServiceAccountToken: true
      priorityClassName: gmp-critical
      tolerations:
      - effect: NoExecute
        operator: Exists
      - effect: NoSchedule
        operator: Exists
      # TODO(TheSpiritXIII): GKE Autopilot Bug: catch-all toleration is not detected.
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "amd64"
        effect: "NoSchedule"
      - key: "kubernetes.io/arch"
        operator: "Equal"
        value: "arm64"
        effect: "NoSchedule"
      volumes:
      - name: storage
        emptyDir: {}
      - name: config
        configMap:
          name: collector
      - name: config-out
        emptyDir: {}
      - name: collection-secret
        secret:
          secretName: collection
