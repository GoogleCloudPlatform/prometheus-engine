{"version":3,"file":"index.js","sources":["../src/tokenizer/types.js","../src/util/whitespace.js","../src/util/location.js","../src/parser/base.js","../src/parser/comments.js","../src/parser/error-codes.js","../src/parser/error-message.js","../src/parser/error.js","../src/plugins/estree.js","../src/tokenizer/context.js","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.js","../src/util/scopeflags.js","../src/util/scope.js","../src/plugins/flow/scope.js","../src/plugins/flow/index.js","../src/plugins/jsx/xhtml.js","../src/plugins/jsx/index.js","../src/plugins/typescript/scope.js","../src/util/production-parameter.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugins/v8intrinsic.js","../src/plugin-utils.js","../src/options.js","../src/tokenizer/state.js","../src/tokenizer/index.js","../src/util/class-scope.js","../src/util/expression-scope.js","../src/parser/util.js","../src/parser/node.js","../src/parser/lval.js","../src/parser/expression.js","../src/parser/statement.js","../src/parser/index.js","../src/index.js"],"sourcesContent":["// @flow\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\nexport class TokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  updateContext: ?(prevType: TokenType) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n}\n\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return new TokenType(name, { beforeExpr, binop });\n}\n\nexport const types: { [name: string]: TokenType } = {\n  num: new TokenType(\"num\", { startsExpr }),\n  bigint: new TokenType(\"bigint\", { startsExpr }),\n  decimal: new TokenType(\"decimal\", { startsExpr }),\n  regexp: new TokenType(\"regexp\", { startsExpr }),\n  string: new TokenType(\"string\", { startsExpr }),\n  name: new TokenType(\"name\", { startsExpr }),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: new TokenType(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: new TokenType(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: new TokenType(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: new TokenType(\"#{\", { beforeExpr, startsExpr }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", { beforeExpr, startsExpr }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", { beforeExpr }),\n  semi: new TokenType(\";\", { beforeExpr }),\n  colon: new TokenType(\":\", { beforeExpr }),\n  doubleColon: new TokenType(\"::\", { beforeExpr }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", { beforeExpr }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", { beforeExpr }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", { beforeExpr }),\n  backQuote: new TokenType(\"`\", { startsExpr }),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr, startsExpr }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: new TokenType(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr, isAssign }),\n  assign: new TokenType(\"_=\", { beforeExpr, isAssign }),\n  incDec: new TokenType(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: new TokenType(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: new TokenType(\"~\", { beforeExpr, prefix, startsExpr }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: new TokenType(\"%\", { beforeExpr, binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: new TokenType(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", { isLoop }),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", { isLoop }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n};\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport { lineBreakG } from \"./whitespace\";\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n\n  constructor(line: number, col: number) {\n    this.line = line;\n    this.column = col;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexport function getLineInfo(input: string, offset: number): Position {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  hasPlugin(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    // $FlowIssue\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n}\n","// @flow\n\n/**\n * Based on the comment attachment algorithm used in espree and estraverse.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\n\nfunction last<T>(stack: $ReadOnlyArray<T>): T {\n  return stack[stack.length - 1];\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(\n    node: Node,\n    elements: (Node | null)[],\n    // When the current node is followed by a token which hasn't a respective AST node, we\n    // need to take all the trailing comments to prevent them from being attached to an\n    // unrelated node. e.g. in\n    //     var { x } /* cmt */ = { y }\n    // we don't want /* cmt */ to be attached to { y }.\n    // On the other hand, in\n    //     fn(x) [new line] /* cmt */ [new line] y\n    // /* cmt */ is both a trailing comment of fn(x) and a leading comment of y\n    takeAllComments?: boolean,\n  ) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (\n        this.state.leadingComments[j].end < this.state.commentPreviousNode.end\n      ) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        // Perf: we don't need to splice if we are going to reset the array anyway\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n        node.trailingComments.push(leadingComment);\n      }\n    }\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node: Node): void {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n\n    const stack = this.state.commentStack;\n\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      // If the first comment in trailingComments comes after the\n      // current node, then we're good - all comments in the array will\n      // come after the node and so it's safe to add them as official\n      // trailingComments.\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        // Otherwise, if the first comment doesn't come after the\n        // current node, that means we have a mix of leading and trailing\n        // comments in the array and that leadingComments contains the\n        // same items as trailingComments. Reset trailingComments to\n        // zero items and we'll handle this by evaluating leadingComments\n        // later.\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n      if (\n        lastInStack.trailingComments &&\n        lastInStack.trailingComments[0].start >= node.end\n      ) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    // Eating the stack.\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    // Adjust comments that follow a trailing comma on the last element in a\n    // comma separated list of nodes to be the trailing comments on the last\n    // element\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (\n      this.state.commentPreviousNode &&\n      ((this.state.commentPreviousNode.type === \"ImportSpecifier\" &&\n        node.type !== \"ImportSpecifier\") ||\n        (this.state.commentPreviousNode.type === \"ExportSpecifier\" &&\n          node.type !== \"ExportSpecifier\"))\n    ) {\n      this.adjustCommentsAfterTrailingComma(node, [\n        this.state.commentPreviousNode,\n      ]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (\n          lastChild !== node &&\n          lastChild.leadingComments.length > 0 &&\n          last(lastChild.leadingComments).end <= node.start\n        ) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          // A leading comment for an anonymous class had been stolen by its first ClassMethod,\n          // so this takes back the leading comment.\n          // See also: https://github.com/eslint/espree/issues/158\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (\n              this.state.leadingComments[j].end <\n              this.state.commentPreviousNode.end\n            ) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        // https://github.com/eslint/espree/issues/2\n        //\n        // In special cases, such as return (without a value) and\n        // debugger, all comments will end up as leadingComments and\n        // will otherwise be eliminated. This step runs when the\n        // commentStack is empty and there are comments left\n        // in leadingComments.\n        //\n        // This loop figures out the stopping point between the actual\n        // leading and trailing comments by finding the location of the\n        // first comment that comes after the given node.\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        // Split the array based on the location of the first comment\n        // that comes after the node. Keep in mind that this could\n        // result in an empty array, and if so, the array must be\n        // deleted.\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        // Similarly, trailing comments are attached later. The variable\n        // must be reset to null if there are no trailing comments.\n        trailingComments = this.state.leadingComments.slice(i);\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (\n        trailingComments.length &&\n        trailingComments[0].start >= node.start &&\n        last(trailingComments).end <= node.end\n      ) {\n        node.innerComments = trailingComments;\n      } else {\n        // TrailingComments maybe contain innerComments\n        const firstTrailingCommentIndex = trailingComments.findIndex(\n          comment => comment.end >= node.end,\n        );\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(\n            0,\n            firstTrailingCommentIndex,\n          );\n          node.trailingComments = trailingComments.slice(\n            firstTrailingCommentIndex,\n          );\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n}\n","// @flow\n\nexport const ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ErrorCode = $Values<typeof ErrorCodes>;\n","// @flow\n\nimport { makeErrorTemplates, ErrorCodes } from \"./error\";\n\n/* eslint sort-keys: \"error\" */\n\n/**\n * @module parser/error-message\n */\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const ErrorMessages = makeErrorTemplates(\n  {\n    AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n    ArgumentsInClass:\n      \"'arguments' is only allowed in functions and class methods.\",\n    AsyncFunctionInSingleStatementContext:\n      \"Async functions can only be declared at the top level or inside a block.\",\n    AwaitBindingIdentifier:\n      \"Can not use 'await' as identifier inside an async function.\",\n    AwaitBindingIdentifierInStaticBlock:\n      \"Can not use 'await' as identifier inside a static block.\",\n    AwaitExpressionFormalParameter:\n      \"'await' is not allowed in async function parameters.\",\n    AwaitNotInAsyncContext:\n      \"'await' is only allowed within async functions and at the top levels of modules.\",\n    AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n    BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n    BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n    BadSetterRestParameter:\n      \"A 'set' accesor function argument must not be a rest parameter.\",\n    ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n    ConstructorClassPrivateField:\n      \"Classes may not have a private field named '#constructor'.\",\n    ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n    ConstructorIsAsync: \"Constructor can't be an async function.\",\n    ConstructorIsGenerator: \"Constructor can't be a generator.\",\n    DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n    DecoratorBeforeExport:\n      \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n    DecoratorConstructor:\n      \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n    DecoratorExportClass:\n      \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n    DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n    DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n    DeletePrivateField: \"Deleting a private field is not allowed.\",\n    DestructureNamedImport:\n      \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n    DuplicateConstructor: \"Duplicate constructor in the same class.\",\n    DuplicateDefaultExport: \"Only one default export allowed per module.\",\n    DuplicateExport:\n      \"`%0` has already been exported. Exported identifiers must be unique.\",\n    DuplicateProto: \"Redefinition of __proto__ property.\",\n    DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n    ElementAfterRest: \"Rest element must be last element.\",\n    EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n    ExportBindingIsString:\n      \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n    ExportDefaultFromAsIdentifier:\n      \"'from' is not allowed as an identifier after 'export default'.\",\n    ForInOfLoopInitializer:\n      \"'%0' loop variable declaration may not have an initializer.\",\n    ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n    ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n    GeneratorInSingleStatementContext:\n      \"Generators can only be declared at the top level or inside a block.\",\n    IllegalBreakContinue: \"Unsyntactic %0.\",\n    IllegalLanguageModeDirective:\n      \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n    IllegalReturn: \"'return' outside of function.\",\n    ImportBindingIsString:\n      'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n    ImportCallArgumentTrailingComma:\n      \"Trailing comma is disallowed inside import(...) arguments.\",\n    ImportCallArity: \"`import()` requires exactly %0.\",\n    ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n    ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n    InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n    InvalidCodePoint: \"Code point out of bounds.\",\n    InvalidDecimal: \"Invalid decimal.\",\n    InvalidDigit: \"Expected number in radix %0.\",\n    InvalidEscapeSequence: \"Bad character escape sequence.\",\n    InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n    InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n    InvalidIdentifier: \"Invalid identifier %0.\",\n    InvalidLhs: \"Invalid left-hand side in %0.\",\n    InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n    InvalidNumber: \"Invalid number.\",\n    InvalidOrMissingExponent:\n      \"Floating-point numbers require a valid exponent after the 'e'.\",\n    InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n    InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n    InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n    InvalidPropertyBindingPattern: \"Binding member expression.\",\n    InvalidRecordProperty:\n      \"Only properties and spread elements are allowed in record definitions.\",\n    InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n    LabelRedeclaration: \"Label '%0' is already declared.\",\n    LetInLexicalBinding:\n      \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n    LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n    MalformedRegExpFlags: \"Invalid regular expression flag.\",\n    MissingClassName: \"A class name is required.\",\n    MissingEqInAssignment:\n      \"Only '=' operator can be used for specifying default value.\",\n    MissingSemicolon: \"Missing semicolon.\",\n    MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n    MixingCoalesceWithLogical:\n      \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n    ModuleAttributeDifferentFromType:\n      \"The only accepted module attribute is `type`.\",\n    ModuleAttributeInvalidValue:\n      \"Only string literals are allowed as module attribute values.\",\n    ModuleAttributesWithDuplicateKeys:\n      'Duplicate key \"%0\" is not allowed in module attributes.',\n    ModuleExportNameHasLoneSurrogate:\n      \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n    ModuleExportUndefined: \"Export '%0' is not defined.\",\n    MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n    NewlineAfterThrow: \"Illegal newline after throw.\",\n    NoCatchOrFinally: \"Missing catch or finally clause.\",\n    NumberIdentifier: \"Identifier directly after number.\",\n    NumericSeparatorInEscapeSequence:\n      \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n    ObsoleteAwaitStar:\n      \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n    OptionalChainingNoNew:\n      \"Constructors in/after an Optional Chain are not allowed.\",\n    OptionalChainingNoTemplate:\n      \"Tagged Template Literals are not allowed in optionalChain.\",\n    OverrideOnConstructor:\n      \"'override' modifier cannot appear on a constructor declaration.\",\n    ParamDupe: \"Argument name clash.\",\n    PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n    PatternHasMethod: \"Object pattern can't contain methods.\",\n    PipelineBodyNoArrow:\n      'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n    PipelineBodySequenceExpression:\n      \"Pipeline body may not be a comma-separated sequence expression.\",\n    PipelineHeadSequenceExpression:\n      \"Pipeline head should not be a comma-separated sequence expression.\",\n    PipelineTopicUnused:\n      \"Pipeline is in topic style but does not use topic reference.\",\n    PrimaryTopicNotAllowed:\n      \"Topic reference was used in a lexical context without topic binding.\",\n    PrimaryTopicRequiresSmartPipeline:\n      \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n    PrivateInExpectedIn:\n      \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n    PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n    RecordExpressionBarIncorrectEndSyntaxType:\n      \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionBarIncorrectStartSyntaxType:\n      \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionHashIncorrectStartSyntaxType:\n      \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n    RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n    SloppyFunction:\n      \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n    StaticPrototype: \"Classes may not have static property named prototype.\",\n    StrictDelete: \"Deleting local variable in strict mode.\",\n    StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n    StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n    StrictFunction:\n      \"In strict mode code, functions can only be declared at top level or inside a block.\",\n    StrictNumericEscape:\n      \"The only valid numeric escape in strict mode is '\\\\0'.\",\n    StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n    StrictWith: \"'with' in strict mode.\",\n    SuperNotAllowed:\n      \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n    SuperPrivateField: \"Private fields can't be accessed on super.\",\n    TrailingDecorator: \"Decorators must be attached to a class element.\",\n    TupleExpressionBarIncorrectEndSyntaxType:\n      \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionBarIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionHashIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n    UnexpectedAwaitAfterPipelineBody:\n      'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n    UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n    UnexpectedImportExport:\n      \"'import' and 'export' may only appear at the top level.\",\n    UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n    UnexpectedLeadingDecorator:\n      \"Leading decorators must be attached to a class declaration.\",\n    UnexpectedLexicalDeclaration:\n      \"Lexical declaration cannot appear in a single-statement context.\",\n    UnexpectedNewTarget:\n      \"`new.target` can only be used in functions or class properties.\",\n    UnexpectedNumericSeparator:\n      \"A numeric separator is only allowed between two digits.\",\n    UnexpectedPrivateField:\n      \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n    UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n    UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n    UnexpectedToken: \"Unexpected token '%0'.\",\n    UnexpectedTokenUnaryExponentiation:\n      \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n    UnsupportedBind: \"Binding should be performed on object property.\",\n    UnsupportedDecoratorExport:\n      \"A decorated export must export a class declaration.\",\n    UnsupportedDefaultExport:\n      \"Only expressions, functions or classes are allowed as the `default` export.\",\n    UnsupportedImport:\n      \"`import` can only be used in `import()` or `import.meta`.\",\n    UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n    UnsupportedParameterDecorator:\n      \"Decorators cannot be used to decorate parameters.\",\n    UnsupportedPropertyDecorator:\n      \"Decorators cannot be used to decorate object literal properties.\",\n    UnsupportedSuper:\n      \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n    UnterminatedComment: \"Unterminated comment.\",\n    UnterminatedRegExp: \"Unterminated regular expression.\",\n    UnterminatedString: \"Unterminated string constant.\",\n    UnterminatedTemplate: \"Unterminated template.\",\n    VarRedeclaration: \"Identifier '%0' has already been declared.\",\n    YieldBindingIdentifier:\n      \"Can not use 'yield' as identifier inside a generator.\",\n    YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n    ZeroDigitNumericSeparator:\n      \"Numeric separator can not be used after leading 0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport const SourceTypeModuleErrorMessages = makeErrorTemplates(\n  {\n    ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n    ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  },\n  /* code */ ErrorCodes.SourceTypeModuleError,\n);\n","// @flow\n/* eslint sort-keys: \"error\" */\nimport { getLineInfo, type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\nimport { type ErrorCode, ErrorCodes } from \"./error-codes\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n  reasonCode?: String,\n};\nexport type ParsingError = SyntaxError & ErrorContext;\n\nexport type ErrorTemplate = {\n  code: ErrorCode,\n  template: string,\n  reasonCode: string,\n};\nexport type ErrorTemplates = {\n  [key: string]: ErrorTemplate,\n};\n\nexport function makeErrorTemplates(\n  messages: {\n    [key: string]: string,\n  },\n  code: ErrorCode,\n): ErrorTemplates {\n  const templates: ErrorTemplates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode,\n      template: messages[reasonCode],\n    });\n  });\n  return Object.freeze(templates);\n}\n\nexport { ErrorCodes };\nexport {\n  ErrorMessages as Errors,\n  SourceTypeModuleErrorMessages as SourceTypeModuleErrors,\n} from \"./error-message\";\n\nexport type raiseFunction = (number, ErrorTemplate, ...any) => void;\n\nexport default class ParserError extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  getLocationForPosition(pos: number): Position {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;\n    else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;\n    else if (pos === this.state.end) loc = this.state.endLoc;\n    else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;\n    else loc = getLineInfo(this.input, pos);\n\n    return loc;\n  }\n\n  raise(\n    pos: number,\n    { code, reasonCode, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    return this.raiseWithData(pos, { code, reasonCode }, template, ...params);\n  }\n\n  /**\n   * Raise a parsing error on given position pos. If errorRecovery is true,\n   * it will first search current errors and overwrite the error thrown on the exact\n   * position before with the new error message. If errorRecovery is false, it\n   * fallbacks to `raise`.\n   *\n   * @param {number} pos\n   * @param {string} errorTemplate\n   * @param {...any} params\n   * @returns {(Error | empty)}\n   * @memberof ParserError\n   */\n  raiseOverwrite(\n    pos: number,\n    { code, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      template.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n        if (error.pos === pos) {\n          return Object.assign(error, { message });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n    return this._raise({ code, loc, pos }, message);\n  }\n\n  raiseWithData(\n    pos: number,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parser/error\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    estreeParseRegExpLiteral({ pattern, flags }: N.RegExpLiteral): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    estreeParseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral(value: any): N.Node {\n      return this.parseLiteral(value, \"Literal\");\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.end,\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(\n        stmt,\n        \"ExpressionStatement\",\n        directive.end,\n        directive.loc.end,\n      );\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    stmtToDirective(stmt: N.Statement): N.Directive {\n      const directive = super.stmtToDirective(stmt);\n      const value = stmt.expression.value;\n\n      // Record the expression value as in estree mode we want\n      // the stmt to have the real value e.g. (\"use strict\") and\n      // not the raw value e.g. (\"use\\\\x20strict\")\n      this.addExtra(directive.value, \"expressionValue\", value);\n\n      return directive;\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      switch (this.state.type) {\n        case tt.num:\n        case tt.string:\n          return this.estreeParseLiteral(this.state.value);\n\n        case tt.regexp:\n          return this.estreeParseRegExpLiteral(this.state.value);\n\n        case tt.bigint:\n          return this.estreeParseBigIntLiteral(this.state.value);\n\n        case tt.decimal:\n          return this.estreeParseDecimalLiteral(this.state.value);\n\n        case tt._null:\n          return this.estreeParseLiteral(null);\n\n        case tt._true:\n          return this.estreeParseLiteral(true);\n\n        case tt._false:\n          return this.estreeParseLiteral(false);\n\n        default:\n          return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    parseMaybePrivateName(...args: [boolean]): any {\n      const node = super.parseMaybePrivateName(...args);\n      if (\n        node.type === \"PrivateName\" &&\n        this.getPluginOption(\"estree\", \"classFeatures\")\n      ) {\n        return this.convertPrivateNameToPrivateIdentifier(node);\n      }\n      return node;\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Literal>(\n      value: any,\n      type: /*T[\"kind\"]*/ string,\n      startPos?: number,\n      startLoc?: Position,\n    ): T {\n      const node = super.parseLiteral(value, type, startPos, startLoc);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n        propertyNode.type = \"PropertyDefinition\";\n      }\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n        propertyNode.type = \"PropertyDefinition\";\n        propertyNode.computed = false;\n      }\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node != null && this.isObjectProperty(node)) {\n        this.toAssignable(node.value, isLHS);\n\n        return node;\n      }\n\n      return super.toAssignable(node, isLHS);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, ...args) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(prop.key.start, Errors.PatternHasAccessor);\n      } else if (prop.method) {\n        this.raise(prop.key.start, Errors.PatternHasMethod);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, ...args);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n  };\n","// @flow\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nimport { types as tt } from \"./types\";\n\nexport class TokContext {\n  constructor(\n    token: string,\n    isExpr?: boolean,\n    preserveSpace?: boolean,\n    override?: ?Function, // Takes a Tokenizer as a this-parameter, and returns void.\n  ) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n  token: string;\n  isExpr: boolean;\n  preserveSpace: boolean;\n  override: ?Function;\n}\n\nexport const types: {\n  [key: string]: TokContext,\n} = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  recordExpression: new TokContext(\"#{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false),\n};\n\n// Token-specific context update code\n// Note that we should avoid accessing `this.prodParam` in context update,\n// because it is executed immediately when last token is consumed, which may be\n// before `this.prodParam` is updated. e.g.\n// ```\n// function *g() { () => yield / 2 }\n// ```\n// When `=>` is eaten, the context update of `yield` is executed, however,\n// `this.prodParam` still has `[Yield]` production because it is not yet updated\n\ntt.parenR.updateContext = tt.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n  if (out === types.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntt.name.updateContext = function (prevType) {\n  let allowed = false;\n  if (prevType !== tt.dot) {\n    if (\n      this.state.value === \"of\" &&\n      !this.state.exprAllowed &&\n      prevType !== tt._function &&\n      prevType !== tt._class\n    ) {\n      allowed = true;\n    }\n  }\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntt.braceL.updateContext = function (prevType) {\n  this.state.context.push(\n    this.braceIsBlock(prevType) ? types.braceStatement : types.braceExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.dollarBraceL.updateContext = function () {\n  this.state.context.push(types.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntt.parenL.updateContext = function (prevType) {\n  const statementParens =\n    prevType === tt._if ||\n    prevType === tt._for ||\n    prevType === tt._with ||\n    prevType === tt._while;\n  this.state.context.push(\n    statementParens ? types.parenStatement : types.parenExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.incDec.updateContext = function () {\n  // tokExprAllowed stays unchanged\n};\n\ntt._function.updateContext = tt._class.updateContext = function (prevType) {\n  if (\n    prevType.beforeExpr &&\n    prevType !== tt.semi &&\n    prevType !== tt._else &&\n    !(prevType === tt._return && this.hasPrecedingLineBreak()) &&\n    !(\n      (prevType === tt.colon || prevType === tt.braceL) &&\n      this.curContext() === types.b_stat\n    )\n  ) {\n    this.state.context.push(types.functionExpression);\n  } else {\n    this.state.context.push(types.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntt.backQuote.updateContext = function () {\n  if (this.curContext() === types.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types.template);\n  }\n  this.state.exprAllowed = false;\n};\n\n// we don't need to update context for tt.braceBarL because we do not pop context for tt.braceBarR\ntt.braceHashL.updateContext = function () {\n  this.state.context.push(types.recordExpression);\n  this.state.exprAllowed = true; /* tt.braceHashL.beforeExpr */\n};\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(current: number, next: number): boolean {\n  return current === charCodes.atSign && next === charCodes.atSign;\n}\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport * as N from \"../types\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlags;\n  // A list of var-declared names in the current lexical scope\n  var: string[] = [];\n  // A list of lexically-declared names in the current lexical scope\n  lexical: string[] = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: string[] = [];\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  declare raise: raiseFunction;\n  declare inModule: boolean;\n  undefinedExports: Map<string, number> = new Map();\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n  get inStaticBlock() {\n    return (this.currentThisScope().flags & SCOPE_STATIC_BLOCK) > 0;\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    pos: number,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, Errors.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        scope.functions.indexOf(name) > -1 ||\n        scope.var.indexOf(name) > -1\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        (!this.treatFunctionsAsVarInScope(scope) &&\n          scope.var.indexOf(name) > -1)\n      );\n    }\n\n    return (\n      (scope.lexical.indexOf(name) > -1 &&\n        !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name)) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        scope.functions.indexOf(name) > -1)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1 &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      this.scopeStack[0].functions.indexOf(id.name) === -1\n    ) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (\n        (scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) &&\n        !(scope.flags & SCOPE_ARROW)\n      ) {\n        return scope;\n      }\n    }\n  }\n}\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: string[] = [];\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.includes(name) &&\n        (scope.lexical.includes(name) || scope.functions.includes(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (this.scopeStack[0].declareFunctions.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type Parser from \"../../parser\";\nimport { types as tt, type TokenType } from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport type { Pos, Position } from \"../../util/location\";\nimport type State from \"../../tokenizer/state\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart, isKeyword } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  type BindingTypes,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = makeErrorTemplates(\n  {\n    AmbiguousConditionalArrow:\n      \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n    AmbiguousDeclareModuleKind:\n      \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n    AssignReservedType: \"Cannot overwrite reserved type %0.\",\n    DeclareClassElement:\n      \"The `declare` modifier can only appear on class fields.\",\n    DeclareClassFieldInitializer:\n      \"Initializers are not allowed in fields with the `declare` modifier.\",\n    DuplicateDeclareModuleExports:\n      \"Duplicate `declare module.exports` statement.\",\n    EnumBooleanMemberNotInitialized:\n      \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n    EnumDuplicateMemberName:\n      \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n    EnumInconsistentMemberValues:\n      \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n    EnumInvalidExplicitType:\n      \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidExplicitTypeUnknownSupplied:\n      \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidMemberInitializerPrimaryType:\n      \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n    EnumInvalidMemberInitializerSymbolType:\n      \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n    EnumInvalidMemberInitializerUnknownType:\n      \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n    EnumInvalidMemberName:\n      \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n    EnumNumberMemberNotInitialized:\n      \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n    EnumStringMemberInconsistentlyInitailized:\n      \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n    GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n    ImportTypeShorthandOnlyInPureImport:\n      \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n    InexactInsideExact:\n      \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n    InexactInsideNonObject:\n      \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n    InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n    InvalidNonTypeImportInDeclareModule:\n      \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n    MissingTypeParamDefault:\n      \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n    NestedDeclareModule:\n      \"`declare module` cannot be used inside another `declare module`.\",\n    NestedFlowComment:\n      \"Cannot have a flow comment inside another flow comment.\",\n    OptionalBindingPattern:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n    SpreadVariance: \"Spread properties cannot have variance.\",\n    ThisParamAnnotationRequired:\n      \"A type annotation is required for the `this` parameter.\",\n    ThisParamBannedInConstructor:\n      \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n    ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n    ThisParamMustBeFirst:\n      \"The `this` parameter must be the first function parameter.\",\n    ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n    TypeBeforeInitializer:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeCastInPattern:\n      \"The type cast expression is expected to be wrapped with parenthesis.\",\n    UnexpectedExplicitInexactInObject:\n      \"Explicit inexact syntax must appear at the end of an inexact object.\",\n    UnexpectedReservedType: \"Unexpected reserved type %0.\",\n    UnexpectedReservedUnderscore:\n      \"`_` is only allowed as a type argument to call or new.\",\n    UnexpectedSpaceBetweenModuloChecks:\n      \"Spaces between `%` and `checks` are not allowed here.\",\n    UnexpectedSpreadType:\n      \"Spread operator cannot appear in class or interface definitions.\",\n    UnexpectedSubtractionOperand:\n      'Unexpected token, expected \"number\" or \"bigint\".',\n    UnexpectedTokenAfterTypeParameter:\n      \"Expected an arrow function after this type parameter declaration.\",\n    UnexpectedTypeParameterBeforeAsyncArrowFunction:\n      \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n    UnsupportedDeclareExportKind:\n      \"`declare export %0` is not supported. Use `%1` instead.\",\n    UnsupportedStatementInDeclareModule:\n      \"Only declares and type imports are allowed inside declare module.\",\n    UnterminatedFlowComment: \"Unterminated flow-comment.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state: State): boolean {\n  return (\n    (state.type === tt.name || !!state.type.keyword) && state.value !== \"from\"\n  );\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", pos: number, value: N.Node |}\n  | {| type: \"string\", pos: number, value: N.Node |}\n  | {| type: \"boolean\", pos: number, value: N.Node |}\n  | {| type: \"invalid\", pos: number |}\n  | {| type: \"none\", pos: number |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloPos = this.state.start;\n      this.next(); // eat `%`\n      this.expectContextual(\"checks\");\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloPos + 1) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(\"type\") && !this.match(tt._typeof)) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n            );\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            \"declare\",\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.DuplicateDeclareModuleExports,\n            );\n          }\n          if (kind === \"ES\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(\"type\") || this.isContextual(\"interface\")) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n\n          throw this.raise(\n            this.state.start,\n            FlowErrors.UnsupportedDeclareExportKind,\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(\"opaque\") // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(\"interface\") || // declare export interface ...\n          this.isContextual(\"type\") || // declare export type ...\n          this.isContextual(\"opaque\") // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.start,\n      );\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word: string, startLoc: number, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        startLoc,\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStart = this.state.start;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      } while (!this.isRelational(\">\"));\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart: ?number = null;\n        let inexactStart: ?number = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n            if (\n              lookahead.type === tt.name ||\n              lookahead.type === tt.string ||\n              lookahead.type === tt.num\n            ) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStart,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStart &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            inexactStart,\n            FlowErrors.UnexpectedExplicitInexactInObject,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStart: ?number,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InexactInsideNonObject,\n            );\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              node.value.this.start,\n              FlowErrors.ThisParamBannedInConstructor,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.value.this.start,\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n        );\n      }\n\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(\n      params: N.FlowFunctionTypeParam[] = [],\n    ): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(\n            startPos,\n            startLoc,\n            node,\n            this.parseIdentifier(),\n          );\n\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(tt.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            node.this = tmp._this;\n            this.expect(tt.parenR);\n\n            this.expect(tt.arrow);\n\n            node.returnType = this.flowParseType();\n\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n          break;\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (this.match(tt.name) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            throw this.raise(\n              this.state.start,\n              FlowErrors.UnexpectedSubtractionOperand,\n            );\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          } else if (this.state.type.keyword) {\n            const label = this.state.type.label;\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      // Ensure that a brace after a function generic type annotation is a\n      // statement, except in arrow functions (noAnonFunctionType)\n      this.state.exprAllowed =\n        this.state.exprAllowed || this.state.noAnonFunctionType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (\n        this.state.strict &&\n        this.match(tt.name) &&\n        this.state.value === \"interface\"\n      ) {\n        const lookahead = this.lookahead();\n        if (lookahead.type === tt.name || isKeyword(lookahead.value)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            this.match(tt.name) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(tt.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      return (\n        this.isContextual(\"type\") ||\n        this.isContextual(\"interface\") ||\n        this.isContextual(\"opaque\") ||\n        (this.shouldParseEnums() && this.isContextual(\"enum\")) ||\n        super.shouldParseExportDeclaration()\n      );\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (\n        this.match(tt.name) &&\n        (this.state.value === \"type\" ||\n          this.state.value === \"interface\" ||\n          this.state.value === \"opaque\" ||\n          (this.shouldParseEnums() && this.state.value === \"enum\"))\n      ) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      // only use the expensive \"tryParse\" method if there is a question mark\n      // and if we come from inside parens\n      if (refNeedsArrowPos) {\n        const result = this.tryParse(() =>\n          super.parseConditional(expr, startPos, startLoc),\n        );\n\n        if (!result.node) {\n          // $FlowIgnore\n          refNeedsArrowPos.start = result.error.pos || this.state.start;\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingComma,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const pos = this.state.start;\n      if (this.isContextual(\"declare\")) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n          this.raise(\n            member.value.start,\n            FlowErrors.DeclareClassFieldInitializer,\n          );\n        }\n      }\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.isIterator = true;\n        return super.readWord();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          return true;\n\n        case \"ObjectExpression\": {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type === \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          });\n        }\n\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n\n        case \"ArrayExpression\":\n          return node.elements.every(element => this.isAssignable(element));\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n\n        case \"ParenthesizedExpression\":\n        case \"TypeCastExpression\":\n          return this.isAssignable(node.expression);\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n\n        default:\n          return false;\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaPos?: ?number,\n      isLHS: boolean,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      ...args:\n        | [string, BindingTypes | void]\n        | [\n            string,\n            BindingTypes | void,\n            ?Set<string>,\n            boolean | void,\n            boolean | void,\n          ]\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, ...args);\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n        } else if (this.isThisParam(param)) {\n          this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n        }\n      }\n    }\n\n    parsePropertyName(\n      node: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n      isPrivateNameAllowed: boolean,\n    ): N.Identifier {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node, isPrivateNameAllowed);\n      // $FlowIgnore (\"variance\" not defined on TsNamedTypeElementBase)\n      node.variance = variance;\n      return key;\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.isRelational(\"<\") && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.OptionalBindingPattern);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamNoDefault);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n\n        // import type * is not allowed\n        if (kind === \"type\" && lh.type === tt.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (\n          isMaybeDefaultImport(lh) ||\n          lh.type === tt.braceL ||\n          lh.type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(node: N.ImportDeclaration): void {\n      const specifier = this.startNode();\n      const firstIdentLoc = this.state.start;\n      const firstIdent = this.parseModuleExportName();\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !this.match(tt.name) &&\n          !this.state.type.keyword\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (\n        specifierTypeKind !== null &&\n        (this.match(tt.name) || this.state.type.keyword)\n      ) {\n        // `import {type foo`\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        if (firstIdent.type === \"StringLiteral\") {\n          throw this.raise(\n            specifier.start,\n            Errors.ImportBindingIsString,\n            firstIdent.value,\n          );\n        }\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(\n          firstIdentLoc,\n          FlowErrors.ImportTypeShorthandOnlyInPureImport,\n        );\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () =>\n            super.parseMaybeAssign(\n              refExpressionErrors,\n              afterLeftParse,\n              refNeedsArrowPos,\n            ),\n          state,\n        );\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === tc.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === tc.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (jsx?.error || this.isRelational(\"<\")) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n                refNeedsArrowPos,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {}: any);\n          if (\n            arrowExpression.type !== \"ArrowFunctionExpression\" &&\n            arrowExpression.extra?.parenthesized\n          ) {\n            abort();\n          }\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                typeParameters.start,\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          typeParameters.start,\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n        );\n      }\n\n      return super.parseMaybeAssign(\n        refExpressionErrors,\n        afterLeftParse,\n        refNeedsArrowPos,\n      );\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.isRelational(\"<\")\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        this.isRelational(\"<\")\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", (this.state.pos += 2));\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, Errors.UnterminatedComment);\n        }\n        this.state.pos = end + 3;\n        return;\n      }\n\n      super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(this.state.pos, Errors.UnterminatedComment);\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(\n        pos,\n        FlowErrors.EnumInvalidMemberName,\n        memberName,\n        suggestion,\n        enumName,\n      );\n    }\n\n    flowEnumErrorDuplicateMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      pos: number,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        pos,\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      pos: number,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      let message = null;\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n        default:\n          // null\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumNumberMemberNotInitialized,\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startPos = this.state.start;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n          if (endOfInit()) {\n            return { type: \"number\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt.string: {\n          const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n          if (endOfInit()) {\n            return { type: \"string\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral();\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        default:\n          return { type: \"invalid\", pos: startPos };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", pos };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      pos: number,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.pos,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.pos,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(tt.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, { enumName, nameLoc }): N.Node {\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, { enumName });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start,\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    updateContext(prevType: TokenType): void {\n      if (\n        this.match(tt.name) &&\n        this.state.value === \"of\" &&\n        prevType === tt.name &&\n        this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) ===\n          \"interface\"\n      ) {\n        this.state.exprAllowed = false;\n      } else {\n        super.updateContext(prevType);\n      }\n    }\n\n    // check if the next token is a tt.relation(\"<\")\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { TokenType, types as tt } from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = makeErrorTemplates(\n  {\n    AttributeIsEmpty:\n      \"JSX attributes must only be assigned a non-empty expression.\",\n    MissingClosingTagElement:\n      \"Expected corresponding JSX closing tag for <%0>.\",\n    MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n    UnexpectedSequenceExpression:\n      \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n    UnsupportedJsxValue:\n      \"JSX value should be either an expression or a quoted JSX text.\",\n    UnterminatedJsxContent: \"Unterminated JSX contents.\",\n    UnwrappedAdjacentJSXElements:\n      \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n/* eslint-disable sort-keys */\n\n// Be aware that this file is always executed and not only when the plugin is enabled.\n// Therefore this contexts and tokens do always exist.\ntc.j_oTag = new TokContext(\"<tag\", false);\ntc.j_cTag = new TokContext(\"</tag\", false);\ntc.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\n\ntt.jsxName = new TokenType(\"jsxName\");\ntt.jsxText = new TokenType(\"jsxText\", { beforeExpr: true });\ntt.jsxTagStart = new TokenType(\"jsxTagStart\", { startsExpr: true });\ntt.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntt.jsxTagStart.updateContext = function () {\n  this.state.context.push(tc.j_expr); // treat as beginning of JSX expression\n  this.state.context.push(tc.j_oTag); // start opening tag context\n  this.state.exprAllowed = false;\n};\n\ntt.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n  if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === tc.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.exprAllowed) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              const htmlEntity =\n                ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\";\n              const char = this.input[this.state.pos];\n              this.raise(this.state.pos, {\n                code: ErrorCodes.SyntaxError,\n                reasonCode: \"UnexpectedToken\",\n                template: `Unexpected token \\`${char}\\`. Did you mean \\`${htmlEntity}\\` or \\`{'${char}'}\\`?`,\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, Errors.UnterminatedString);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (this.state.type.keyword) {\n        node.name = this.state.type.keyword;\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.next();\n          node = this.jsxParseExpressionContainer(node);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(node.start, JsxErrors.AttributeIsEmpty);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEnd,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(\n        node,\n        \"JSXEmptyExpression\",\n        this.state.start,\n        this.state.startLoc,\n      );\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              expression.expressions[1].start,\n              JsxErrors.UnexpectedSequenceExpression,\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (isFragment(openingElement) && !isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagFragment,\n          );\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagElement,\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              // $FlowIgnore\n              closingElement.start,\n              JsxErrors.MissingClosingTagElement,\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.isRelational(\"<\")) {\n        throw this.raise(\n          this.state.start,\n          JsxErrors.UnwrappedAdjacentJSXElements,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.isRelational(\"<\") &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.finishToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    getTokenFromCode(code: number): void {\n      if (this.state.inPropertyName) return super.getTokenFromCode(code);\n\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.exprAllowed &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      if (this.match(tt.braceL)) {\n        const curContext = this.curContext();\n        if (curContext === tc.j_oTag) {\n          this.state.context.push(tc.braceExpression);\n        } else if (curContext === tc.j_expr) {\n          this.state.context.push(tc.templateQuasi);\n        } else {\n          super.updateContext(prevType);\n        }\n        this.state.exprAllowed = true;\n      } else if (this.match(tt.slash) && prevType === tt.jsxTagStart) {\n        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.state.context.push(tc.j_cTag); // reconsider as closing tag context\n        this.state.exprAllowed = false;\n      } else {\n        return super.updateContext(prevType);\n      }\n    }\n  };\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: string[] = [];\n\n  // enums (which are also in .types)\n  enums: string[] = [];\n\n  // const enums (which are also in .enums and .types)\n  constEnums: string[] = [];\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: string[] = [];\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: string[] = [];\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.push(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].types.indexOf(id.name) === -1 &&\n      this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type { TokenType } from \"../../tokenizer/types\";\nimport type State from \"../../tokenizer/state\";\nimport { types as tt } from \"../../tokenizer/types\";\nimport { types as ct } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Pos, Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport {\n  Errors,\n  makeErrorTemplates,\n  type ErrorTemplate,\n  ErrorCodes,\n} from \"../../parser/error\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = makeErrorTemplates(\n  {\n    AbstractMethodHasImplementation:\n      \"Method '%0' cannot have an implementation because it is marked abstract.\",\n    AccesorCannotDeclareThisParameter:\n      \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n    AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n    ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n    ClassMethodHasReadonly:\n      \"Class methods cannot have the 'readonly' modifier.\",\n    ConstructorHasTypeParameters:\n      \"Type parameters cannot appear on a constructor declaration.\",\n    DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n    DeclareClassFieldHasInitializer:\n      \"Initializers are not allowed in ambient contexts.\",\n    DeclareFunctionHasImplementation:\n      \"An implementation cannot be declared in ambient contexts.\",\n    DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n    DuplicateModifier: \"Duplicate modifier: '%0'.\",\n    EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n    EmptyTypeArguments: \"Type argument list cannot be empty.\",\n    EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n    ExpectedAmbientAfterExportDeclare:\n      \"'export declare' must be followed by an ambient declaration.\",\n    ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n    IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n    IndexSignatureHasAbstract:\n      \"Index signatures cannot have the 'abstract' modifier.\",\n    IndexSignatureHasAccessibility:\n      \"Index signatures cannot have an accessibility modifier ('%0').\",\n    IndexSignatureHasDeclare:\n      \"Index signatures cannot have the 'declare' modifier.\",\n    IndexSignatureHasOverride:\n      \"'override' modifier cannot appear on an index signature.\",\n    IndexSignatureHasStatic:\n      \"Index signatures cannot have the 'static' modifier.\",\n    InvalidModifierOnTypeMember:\n      \"'%0' modifier cannot appear on a type member.\",\n    InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n    InvalidTupleMemberLabel:\n      \"Tuple members must be labeled with a simple identifier.\",\n    MixedLabeledAndUnlabeledElements:\n      \"Tuple members must all have names or all not have names.\",\n    NonAbstractClassHasAbstractMethod:\n      \"Abstract methods can only appear within an abstract class.\",\n    NonClassMethodPropertyHasAbstractModifer:\n      \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n    OptionalTypeBeforeRequired:\n      \"A required element cannot follow an optional element.\",\n    OverrideNotInSubClass:\n      \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    PrivateElementHasAbstract:\n      \"Private elements cannot have the 'abstract' modifier.\",\n    PrivateElementHasAccessibility:\n      \"Private elements cannot have an accessibility modifier ('%0').\",\n    ReadonlyForMethodSignature:\n      \"'readonly' modifier can only appear on a property declaration or index signature.\",\n    SetAccesorCannotHaveOptionalParameter:\n      \"A 'set' accessor cannot have an optional parameter.\",\n    SetAccesorCannotHaveRestParameter:\n      \"A 'set' accessor cannot have rest parameter.\",\n    SetAccesorCannotHaveReturnType:\n      \"A 'set' accessor cannot have a return type annotation.\",\n    StaticBlockCannotHaveModifier:\n      \"Static class blocks cannot have any modifier.\",\n    TypeAnnotationAfterAssign:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeImportCannotSpecifyDefaultAndNamed:\n      \"A type-only import can specify a default import or named bindings, but not both.\",\n    UnexpectedParameterModifier:\n      \"A parameter property is only allowed in a constructor implementation.\",\n    UnexpectedReadonly:\n      \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n    UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n    UnexpectedTypeCastInParameter:\n      \"Unexpected type cast in parameter position.\",\n    UnsupportedImportTypeArgument:\n      \"Argument in a type import must be a string literal.\",\n    UnsupportedParameterPropertyKind:\n      \"A parameter property may not be declared using a binding pattern.\",\n    UnsupportedSignatureParameterKind:\n      \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return this.match(tt.name);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.hash) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(allowedModifiers: T[]): ?T {\n      if (!this.match(tt.name)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (\n        allowedModifiers.indexOf(modifier) !== -1 &&\n        this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))\n      ) {\n        return modifier;\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers(\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      errorTemplate?: ErrorTemplate,\n    ): void {\n      const enforceOrder = (pos, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n        }\n      };\n      const incompatible = (pos, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n        }\n      };\n\n      for (;;) {\n        const startPos = this.state.start;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n          } else {\n            enforceOrder(startPos, modifier, modifier, \"override\");\n            enforceOrder(startPos, modifier, modifier, \"static\");\n\n            modified.accessibility = modifier;\n          }\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n          } else {\n            enforceOrder(startPos, modifier, \"static\", \"readonly\");\n            enforceOrder(startPos, modifier, \"static\", \"override\");\n            enforceOrder(startPos, modifier, \"override\", \"readonly\");\n            enforceOrder(startPos, modifier, \"abstract\", \"override\");\n\n            incompatible(startPos, modifier, \"declare\", \"override\");\n            incompatible(startPos, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(\n            startPos,\n            // $FlowIgnore\n            errorTemplate,\n            modifier,\n          );\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.isRelational(\">\");\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n    ): ?(T[]) {\n      const result = [];\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expectRelational(\"<\");\n        }\n      }\n\n      const result = this.tsParseDelimitedList(kind, parseElement);\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expectRelational(\">\");\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.isRelational(\"<\")) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n      );\n      if (node.params.length === 0) {\n        this.raise(node.start, TSErrors.EmptyTypeParameters);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature.parameters = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      } else if (this.match(returnToken)) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              pattern.start,\n              TSErrors.UnsupportedSignatureParameterKind,\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      return this.eat(tt.name) && this.match(tt.colon);\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        if (readonly) {\n          this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.isRelational(\"<\")) {\n          this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        if (method.kind === \"get\") {\n          if (method.parameters.length > 0) {\n            this.raise(this.state.pos, Errors.BadGetterArity);\n            if (this.isThisParam(method.parameters[0])) {\n              this.raise(\n                this.state.pos,\n                TSErrors.AccesorCannotDeclareThisParameter,\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method.parameters.length !== 1) {\n            this.raise(this.state.pos, Errors.BadSetterArity);\n          } else {\n            const firstParameter = method.parameters[0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                this.state.pos,\n                TSErrors.AccesorCannotDeclareThisParameter,\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                this.state.pos,\n                TSErrors.SetAccesorCannotHaveOptionalParameter,\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                this.state.pos,\n                TSErrors.SetAccesorCannotHaveRestParameter,\n              );\n            }\n          }\n          if (method.typeAnnotation) {\n            this.raise(\n              method.typeAnnotation.start,\n              TSErrors.SetAccesorCannotHaveReturnType,\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        node,\n        [\"readonly\"],\n        [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n        TSErrors.InvalidModifierOnTypeMember,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node, /* isPrivateNameAllowed */ false);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node, /* isPrivateNameAllowed */ false);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(\"readonly\");\n      }\n      if (this.isContextual(\"readonly\")) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(\"readonly\");\n      } else if (this.eatContextual(\"readonly\")) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(\n            elementNode.start,\n            TSErrors.MixedLabeledAndUnlabeledElements,\n          );\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.name:\n        case tt._void:\n        case tt._null: {\n          const type = this.match(tt._void)\n            ? \"TSVoidKeyword\"\n            : this.match(tt._null)\n            ? \"TSNullKeyword\"\n            : keywordTypeFromName(this.state.value);\n          if (\n            type !== undefined &&\n            this.lookaheadCharCode() !== charCodes.dot\n          ) {\n            const node: N.TsKeywordType = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n          return this.tsParseTypeReference();\n        }\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.backQuote:\n          return this.tsParseTemplateLiteralType();\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(\n      operator: \"keyof\" | \"unique\" | \"readonly\",\n    ): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      this.expectContextual(operator);\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(node.start, TSErrors.UnexpectedReadonly);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(\"infer\");\n      const typeParameter = this.startNode();\n      typeParameter.name = this.parseIdentifierName(typeParameter.start);\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw =>\n        this.isContextual(kw),\n      );\n      return operator\n        ? this.tsParseTypeOperator(operator)\n        : this.isContextual(\"infer\")\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.isRelational(\"<\")) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (this.match(tt.name) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (\n        !this.match(tt.name) ||\n        this.state.value !== \"asserts\" ||\n        this.hasPrecedingLineBreak()\n      ) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!this.match(tt.name) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          this.state.lastTokStart,\n          Errors.InvalidEscapedReservedWord,\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return this.isContextual(\"abstract\") && this.lookahead().type === tt._new;\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expectRelational(\">\");\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStart = this.state.start;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        \"typescript interface declaration\",\n        BIND_TS_INTERFACE,\n      );\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsInType(() => {\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(\"intrinsic\") &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        \"typescript enum declaration\",\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          \"module or namespace declaration\",\n          BIND_TS_NAMESPACE,\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(\"global\")) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(\"require\") &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(\"require\");\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(\"let\")) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        switch (starttype) {\n          case tt._function:\n            nany.declare = true;\n            return this.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* declarationPosition */ true,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to now how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._const:\n            if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n              // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n              this.expect(tt._const);\n              this.expectContextual(\"enum\");\n              return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n            }\n          // falls through\n          case tt._var:\n            kind = kind || this.state.value;\n            return this.parseVarStatement(nany, kind);\n          case tt.name: {\n            const value = this.state.value;\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, /* next */ true);\n            }\n          }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || this.match(tt.name))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"enum\":\n          if (next || this.match(tt.name)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (this.tsCheckLineTerminator(next) && this.match(tt.name)) {\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (this.match(tt.name)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (this.tsCheckLineTerminator(next) && this.match(tt.name)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (this.tsCheckLineTerminator(next) && this.match(tt.name)) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.isRelational(\"<\")) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expectRelational(\"<\");\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(node.start, TSErrors.EmptyTypeArguments);\n      }\n      // This reads the next token after the `>` too, so do this in the enclosing context.\n      // But be sure not to parse a regex in the jsx expression `<C<number> />`, so set exprAllowed = false\n      this.state.exprAllowed = false;\n      this.expectRelational(\">\");\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      if (this.match(tt.name)) {\n        switch (this.state.value) {\n          case \"abstract\":\n          case \"declare\":\n          case \"enum\":\n          case \"interface\":\n          case \"module\":\n          case \"namespace\":\n          case \"type\":\n            return true;\n        }\n      }\n\n      return false;\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      if (allowModifiers !== undefined) {\n        accessibility = this.parseAccessModifier();\n        readonly = !!this.tsParseModifier([\"readonly\"]);\n        if (allowModifiers === false && (accessibility || readonly)) {\n          this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(\n            node.typeAnnotation.start,\n            TSErrors.UnexpectedTypeAnnotation,\n          );\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        this.state.exprAllowed = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArguments();\n\n          if (typeArguments) {\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n\n              // Handles invalid case: `f<T>(a:b)`\n              this.tsCheckForInvalidTypeCasts(node.arguments);\n\n              node.typeParameters = typeArguments;\n              if (state.optionalChainMember) {\n                // $FlowIgnore\n                node.optional = false;\n              }\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (this.match(tt.backQuote)) {\n              const result = this.parseTaggedTemplateExpression(\n                base,\n                startPos,\n                startLoc,\n                state,\n              );\n              result.typeParameters = typeArguments;\n              return result;\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArguments();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        nonNull(tt._in.binop) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(\"as\")\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: number, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (this.match(tt.name) || this.match(tt.star) || this.match(tt.braceL)) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(\"type\") &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          !(ahead.type === tt.name && ahead.value === \"from\") &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (this.match(tt.name) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(\n          importNode.start,\n          TSErrors.TypeImportCannotSpecifyDefaultAndNamed,\n        );\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(\"type\") &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(\"as\")) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(\"namespace\");\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (this.isContextual(\"type\") && this.lookahead().type === tt.braceL) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(\"abstract\") && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.state.value === \"interface\") {\n        const result = this.tsParseDeclaration(\n          this.startNode(),\n          this.state.value,\n          true,\n        );\n\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt.name && ahead.value === \"enum\") {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.expect(tt._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const invalidModifersForStaticBlocks = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n      ];\n      this.tsParseModifiers(\n        member,\n        invalidModifersForStaticBlocks.concat([\"static\"]),\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        const isStatic = !!member.static;\n        if (isStatic && this.eat(tt.braceL)) {\n          if (this.tsHasSomeModifiers(member, invalidModifersForStaticBlocks)) {\n            this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            member.start,\n            TSErrors.IndexSignatureHasAccessibility,\n            (member: any).accessibility,\n          );\n        }\n        if ((member: any).declare) {\n          this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n        }\n        if ((member: any).override) {\n          this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(member.start, TSErrors.OverrideNotInSubClass);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!refNeedsArrowPos || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refNeedsArrowPos,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        // $FlowIgnore\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(\"declare\");\n\n      if (\n        isDeclare &&\n        (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          this.state.start,\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n        );\n      }\n\n      let declaration: ?N.Declaration;\n\n      if (this.match(tt.name)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n      if (\n        declaration &&\n        (declaration.type === \"TSInterfaceDeclaration\" ||\n          declaration.type === \"TSTypeAliasDeclaration\" ||\n          isDeclare)\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          node.start,\n          TSErrors.PrivateElementHasAccessibility,\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n      }\n\n      // $FlowIgnore\n      if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n        this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.tsParseTypeArguments();\n      }\n      if (this.eatContextual(\"implements\")) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (decl.id.type === \"Identifier\" && this.eat(tt.bang)) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === ct.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === ct.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (!jsx?.error && !this.isRelational(\"<\")) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(param.start, TSErrors.PatternIsOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node), isLHS);\n        case \"TSParameterProperty\":\n          return super.toAssignable(node, isLHS);\n        case \"ParenthesizedExpression\":\n          return this.toAssignableParenthesizedExpression(node, isLHS);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean) {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      contextDescription: string,\n      ...args:\n        | [BindingTypes | void]\n        | [BindingTypes | void, ?Set<string>, boolean | void, boolean | void]\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(expr.parameter, \"parameter property\", ...args);\n          return;\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (\n            /*bindingType*/ !args[0] &&\n            contextDescription !== \"parenthesized expression\" &&\n            !expr.extra?.parenthesized\n          ) {\n            this.raise(expr.start, Errors.InvalidLhs, contextDescription);\n            break;\n          }\n          this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n          return;\n        case \"TSNonNullExpression\":\n          this.checkLVal(expr.expression, contextDescription, ...args);\n          return;\n        default:\n          super.checkLVal(expr, contextDescription, ...args);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(this.state.start, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close) {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n      } else {\n        super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(\n          node.typeAnnotation.start,\n          TSErrors.TypeAnnotationAfterAssign,\n        );\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      if (this.match(tt.relational)) {\n        const code = this.input.charCodeAt(this.state.start);\n        if (code === charCodes.lessThan || code === charCodes.greaterThan) {\n          this.state.pos -= 1;\n          this.readToken_lt_gt(code);\n        }\n      }\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    shouldParseArrow() {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArguments(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | typeof undefined {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(\"interface\")) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(\n            node.start,\n            TSErrors.NonClassMethodPropertyHasAbstractModifer,\n          );\n          this.next();\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(\n            method.start,\n            TSErrors.AbstractMethodHasImplementation,\n            key.type === \"Identifier\"\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n          );\n        }\n      }\n      return method;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n  };\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { makeErrorTemplates, ErrorCodes } from \"../parser/error\";\n\ntt.placeholder = new TokenType(\"%%\", { startsExpr: true });\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\nconst PlaceHolderErrors = makeErrorTemplates(\n  {\n    ClassNameIsRequired: \"A class name is required.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(\"let\")) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tt.placeholder.label,\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(\"from\");\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { types as tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStart = this.state.start;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.eat(tt.modulo);\n        if (this.match(tt.name)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStart);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\n\nexport type Plugin = string | [string, Object];\n\nexport type PluginList = $ReadOnlyArray<Plugin>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\nexport function hasPlugin(plugins: PluginList, name: string): boolean {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (\n    hasPlugin(plugins, \"pipelineOperator\") &&\n    !PIPELINE_PROPOSALS.includes(\n      getPluginOption(plugins, \"pipelineOperator\", \"proposal\"),\n    )\n  ) {\n    throw new Error(\n      \"'pipelineOperator' requires 'proposal' option whose value should be one of: \" +\n        PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (hasPlugin(plugins, \"importAssertions\")) {\n      throw new Error(\n        \"Cannot combine importAssertions and moduleAttributes plugins.\",\n      );\n    }\n    const moduleAttributesVerionPluginOption = getPluginOption(\n      plugins,\n      \"moduleAttributes\",\n      \"version\",\n    );\n    if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n      throw new Error(\n        \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n          \" representing the last proposal update. Currently, the\" +\n          \" only supported value is 'may-2020'.\",\n      );\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> = Object.keys(\n  mixinPlugins,\n);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Line from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { types as tt, type TokenType } from \"./types\";\nimport type { ParsingError, ErrorTemplate } from \"../parser/error\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init(options: Options): void {\n    this.strict =\n      options.strictMode === false ? false : options.sourceType === \"module\";\n\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  errors: ParsingError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inPipeline: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  inPropertyName: boolean = false;\n  hasFlowComment: boolean = false;\n  isIterator: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n\n  // For the smartPipelines plugin:\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F# plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store.\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  trailingComments: Array<N.Comment> = [];\n  leadingComments: Array<N.Comment> = [];\n  commentStack: Array<{\n    start: number,\n    leadingComments: ?Array<N.Comment>,\n    trailingComments: ?Array<N.Comment>,\n    type: string,\n  }> = [];\n  // $FlowIgnore this is initialized when the parser starts.\n  commentPreviousNode: N.Node = null;\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n  lineStart: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n  lastTokEnd: number = 0;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  context: Array<TokContext> = [ct.braceStatement];\n  exprAllowed: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, ErrorTemplate> = new Map();\n\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  exportedIdentifiers: Array<string> = [];\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport { types as tt, keywords as keywordTypes, type TokenType } from \"./types\";\nimport { type TokContext, types as ct } from \"./context\";\nimport ParserErrors, { Errors, type ErrorTemplate } from \"../parser/error\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreak,\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends ParserErrors {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +hasPrecedingLineBreak: () => boolean;\n  +unexpected: (pos?: ?number, messageOrType?: ErrorTemplate | TokenType) => empty;\n  +expectPlugin: (name: string, pos?: ?number) => true;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // TODO\n\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  // TODO\n\n  lookahead(): State {\n    const old = this.state;\n    this.state = old.clone(true);\n\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    // $FlowIgnore: The skipWhiteSpace ensures to match any string\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach((message, pos) =>\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(pos, message),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    const curContext = this.curContext();\n    if (!curContext?.preserveSpace) this.skipSpace();\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    const override = curContext?.override;\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(\n    block: boolean,\n    text: string,\n    start: number,\n    end: number,\n    startLoc: Position,\n    endLoc: Position,\n  ): void {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc),\n    };\n\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment(): void {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, Errors.UnterminatedComment);\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n    while (\n      (match = lineBreakG.exec(this.input)) &&\n      match.index < this.state.pos\n    ) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      true,\n      this.input.slice(start + 2, end),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  skipLineComment(startSkip: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      false,\n      this.input.slice(start + startSkip, this.state.pos),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk:\n              this.skipBlockComment();\n              break;\n\n            case charCodes.slash:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n      }\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(this.state.pos, Errors.UnexpectedDigitAfterHash);\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          this.state.pos,\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n        );\n      }\n\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n      this.state.pos += 2;\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    // '/'\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    // Exponentiation operator **\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    if (next === charCodes.equalsTo && !exprAllowed) {\n      width++;\n      type = tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n\n        this.finishOp(tt.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    // '^'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (\n        next === charCodes.dash &&\n        !this.inModule &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan &&\n        (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())\n      ) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code: number): void {\n    // '<>'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size =\n        code === charCodes.greaterThan &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan\n          ? 3\n          : 2;\n      if (this.input.charCodeAt(this.state.pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShift, size);\n      return;\n    }\n\n    if (\n      next === charCodes.exclamationMark &&\n      code === charCodes.lessThan &&\n      !this.inModule &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dash &&\n      this.input.charCodeAt(this.state.pos + 3) === charCodes.dash\n    ) {\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      size = 2;\n    }\n\n    this.finishOp(tt.relational, size);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // [|\n          this.finishToken(tt.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // {|\n          this.finishToken(tt.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        ++this.state.pos;\n        this.finishToken(tt.backQuote);\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n      case charCodes.greaterThan:\n        this.readToken_lt_gt(code);\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        ++this.state.pos;\n        this.finishToken(tt.at);\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n    }\n\n    throw this.raise(\n      this.state.pos,\n      Errors.InvalidOrUnexpectedToken,\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const start = this.state.pos;\n    let escaped, inClass;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      const ch = this.input.charAt(this.state.pos);\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n        escaped = ch === \"\\\\\";\n      }\n      ++this.state.pos;\n    }\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, Errors.DuplicateRegExpFlags);\n        }\n      } else if (\n        isIdentifierChar(charCode) ||\n        charCode === charCodes.backslash\n      ) {\n        this.raise(this.state.pos + 1, Errors.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        } else if (\n          forbiddenSiblings.indexOf(prev) > -1 ||\n          forbiddenSiblings.indexOf(next) > -1 ||\n          Number.isNaN(next)\n        ) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, Errors.NumericSeparatorInEscapeSequence);\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, Errors.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(this.state.start + 2, Errors.InvalidDigit, radix);\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(start, Errors.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, Errors.InvalidNumber);\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, Errors.StrictOctalLiteral);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, Errors.ZeroDigitNumericSeparator);\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(start, Errors.InvalidOrMissingExponent);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, Errors.InvalidBigIntLiteral);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, Errors.InvalidDecimal);\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, Errors.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template string tokens.\n\n  readTmplToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedTemplate);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (\n        ch === charCodes.graveAccent ||\n        (ch === charCodes.dollarSign &&\n          this.input.charCodeAt(this.state.pos + 1) ===\n            charCodes.leftCurlyBrace)\n      ) {\n        if (this.state.pos === this.state.start && this.match(tt.template)) {\n          if (ch === charCodes.dollarSign) {\n            this.state.pos += 2;\n            this.finishToken(tt.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(tt.backQuote);\n            return;\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.template, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos: number, message: ErrorTemplate) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(\n            this.state.pos - 1,\n            Errors.StrictNumericEscape,\n          );\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          const codePos = this.state.pos - 1;\n          const match = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, Errors.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, Errors.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  readWord1(): string {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === charCodes.atSign) {\n        ++this.state.pos;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(this.state.pos, Errors.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, Errors.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word: string): boolean {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(): void {\n    const word = this.readWord1();\n    const type = keywordTypes.get(word) || tt.name;\n\n    // Allow @@iterator and @@asyncIterator as a identifier only inside type\n    if (\n      this.state.isIterator &&\n      (!this.isIterator(word) || !this.state.inType)\n    ) {\n      this.raise(this.state.pos, Errors.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes(): void {\n    const kw = this.state.type.keyword;\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, Errors.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType: TokenType): boolean {\n    const parent = this.curContext();\n    if (parent === ct.functionExpression || parent === ct.functionStatement) {\n      return true;\n    }\n    if (\n      prevType === tt.colon &&\n      (parent === ct.braceStatement || parent === ct.braceExpression)\n    ) {\n      return !parent.isExpr;\n    }\n\n    // The check for `tt.name && exprAllowed` detects whether we are\n    // after a `yield` or `of` construct. See the `updateContext` for\n    // `tt.name`.\n    if (\n      prevType === tt._return ||\n      (prevType === tt.name && this.state.exprAllowed)\n    ) {\n      return this.hasPrecedingLineBreak();\n    }\n\n    if (\n      prevType === tt._else ||\n      prevType === tt.semi ||\n      prevType === tt.eof ||\n      prevType === tt.parenR ||\n      prevType === tt.arrow\n    ) {\n      return true;\n    }\n\n    if (prevType === tt.braceL) {\n      return parent === ct.braceStatement;\n    }\n\n    if (\n      prevType === tt._var ||\n      prevType === tt._const ||\n      prevType === tt.name\n    ) {\n      return false;\n    }\n\n    if (prevType === tt.relational) {\n      // `class C<T> { ... }`\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType: TokenType): void {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === tt.dot || prevType === tt.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if ((update = type.updateContext)) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, number> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  declare raise: raiseFunction;\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    pos: number,\n  ) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, Errors.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, pos: number) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      // top-level\n      this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n    }\n  }\n}\n","// @flow\n\nimport type { ErrorTemplate, raiseFunction } from \"../parser/error\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser/error-message) will be recorded in\nsome expression scopes and thrown later when we know what the ambigous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  errors: Map</* pos */ number, /* message */ ErrorTemplate> = new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(pos: number, template: ErrorTemplate) {\n    this.errors.set(pos, template);\n  }\n  clearDeclarationError(pos: number) {\n    this.errors.delete(pos);\n  }\n  iterateErrors(iterator: (template: ErrorTemplate, pos: number) => void) {\n    this.errors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n  declare raise: raiseFunction;\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(pos: number, template: ErrorTemplate): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(pos, template);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    this.raise(pos, template);\n  }\n\n  /**\n   * Record parenthesized identifier errors\n   *\n   * A parenthesized identifier in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordParenthesizedIdentifierError(\n    pos: number,\n    template: ErrorTemplate,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError(pos: number, template: ErrorTemplate): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(pos, template);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors((template, pos) => {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(pos, template);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport { Errors, type ErrorTemplate, ErrorCodes } from \"./error\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(node: Node, key: string, val: any): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    extra[key] = val;\n  }\n\n  // TODO\n\n  isRelational(op: \"<\" | \">\"): boolean {\n    return this.match(tt.relational) && this.state.value === op;\n  }\n\n  // TODO\n\n  expectRelational(op: \"<\" | \">\"): void {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, tt.relational);\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(name: string): boolean {\n    return (\n      this.match(tt.name) &&\n      this.state.value === name &&\n      !this.state.containsEsc\n    );\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    return (\n      this.input.slice(nameStart, nameEnd) === name &&\n      (nameEnd === this.input.length ||\n        !isIdentifierChar(this.input.charCodeAt(nameEnd)))\n    );\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(name: string): boolean {\n    return this.isContextual(name) && this.eat(tt.name);\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(name: string, template?: ErrorTemplate): void {\n    if (!this.eatContextual(name)) this.unexpected(null, template);\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEnd, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.end, this.nextTokenStart()),\n    );\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(this.state.lastTokEnd, Errors.MissingSemicolon);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, pos?: ?number): void {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEnd) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message,\n      });\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(\n    pos: ?number,\n    messageOrType: ErrorTemplate | TokenType = {\n      code: ErrorCodes.SyntaxError,\n      reasonCode: \"UnexpectedToken\",\n      template: \"Unexpected token\",\n    },\n  ): empty {\n    if (messageOrType instanceof TokenType) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${messageOrType.label}\"`,\n      };\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n    /* eslint-enable @babel/development-internal/dry-error-messages */\n  }\n\n  expectPlugin(name: string, pos?: ?number): true {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: [name] },\n        `This experimental syntax requires enabling the parser plugin: '${name}'`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names: Array<string>, pos?: ?number): void {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: names },\n        `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\n          \", \",\n        )}'`,\n      );\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, SyntaxError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: SyntaxError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const { shorthandAssign, doubleProto } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, Errors.DuplicateProto);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return (\n      this.match(tt.name) ||\n      !!this.state.type.keyword ||\n      this.match(tt.string) ||\n      this.match(tt.num) ||\n      this.match(tt.bigint) ||\n      this.match(tt.decimal)\n    );\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/proposal-class-fields/#sec-private-names-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.state.exportedIdentifiers;\n    this.state.exportedIdentifiers = [];\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.state.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track\n * - **shorthandAssign**: track initializer `=` position when parsing ambiguous\n *   patterns. When we are sure the parsed pattern is a RHS, which means it is\n *   not a pattern, we will throw on this position on invalid assign syntax,\n *   otherwise it will be reset to -1\n * - **doubleProto**: track the duplicate `__proto__` key position when parsing\n *   ambiguous object patterns. When we are sure the parsed pattern is a RHS,\n *   which means it is an object literal, we will throw on this position for\n *   __proto__ redefinition, otherwise it will be reset to -1\n */\nexport class ExpressionErrors {\n  shorthandAssign = -1;\n  doubleProto = -1;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n  range: [number, number];\n  leadingComments: Array<Comment>;\n  trailingComments: Array<Comment>;\n  innerComments: Array<Comment>;\n  extra: { [key: string]: any };\n\n  __clone(): this {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // $FlowIgnore\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(\n      node,\n      type,\n      this.state.lastTokEnd,\n      this.state.lastTokEndLoc,\n    );\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(\n    node: T,\n    type: string,\n    pos: number,\n    loc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    end?: number = this.state.lastTokEnd,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: Identifier, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./error\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method in flow.js.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression. If isLHS is `true`, the following cases are allowed:\n                                    `[(a)] = [0]`, `[(a.b)] = [0]`\n\n   * @returns {Node} The converted assignable pattern\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordParenthesizedIdentifierError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(\n            node.start,\n            Errors.InvalidParenthesizedAssignment,\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingComma\n          ) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg, isLHS);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, node.extra?.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, Errors.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      const error =\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod;\n\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(prop.key.start, error);\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaPos?: ?number,\n    isLHS: boolean,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n    return exprList;\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, Errors.UnsupportedParameterDecorator);\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  /**\n   * Verify that if a node is an lval - something that can be assigned to.\n   *\n   * @param {Expression} expr The given node\n   * @param {string} contextDescription The auxiliary context information printed when error is thrown\n   * @param {BindingTypes} [bindingType=BIND_NONE] The desired binding type. If the given node is an identifier and `bindingType` is not\n                                                   BIND_NONE, `checkLVal` will register binding to the parser scope\n                                                   See also src/util/scopeflags.js\n   * @param {?Set<string>} checkClashes An optional string set to check if an identifier name is included. `checkLVal` will add checked\n                                        identifier name to `checkClashes` It is used in tracking duplicates in function parameter lists. If\n                                        it is nullish, `checkLVal` will skip duplicate checks\n   * @param {boolean} [disallowLetBinding] Whether an identifier named \"let\" should be disallowed\n   * @param {boolean} [strictModeChanged=false] Whether an identifier has been parsed in a sloppy context but should be reinterpreted as\n                                                strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @memberof LValParser\n   */\n  checkLVal(\n    expr: Expression,\n    contextDescription: string,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?Set<string>,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\": {\n        const { name } = expr;\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(name, this.inModule)\n            : isStrictBindOnlyReservedWord(name))\n        ) {\n          this.raise(\n            expr.start,\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            name,\n          );\n        }\n\n        if (checkClashes) {\n          if (checkClashes.has(name)) {\n            this.raise(expr.start, Errors.ParamDupe);\n          } else {\n            checkClashes.add(name);\n          }\n        }\n        if (disallowLetBinding && name === \"let\") {\n          this.raise(expr.start, Errors.LetInLexicalBinding);\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(name, bindingType, expr.start);\n        }\n        break;\n      }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, Errors.InvalidPropertyBindingPattern);\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (this.isObjectMethod(prop)) continue;\n\n          this.checkLVal(\n            prop,\n            \"object destructuring pattern\",\n            bindingType,\n            checkClashes,\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              \"array destructuring pattern\",\n              bindingType,\n              checkClashes,\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          \"assignment pattern\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          \"rest element\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          \"parenthesized expression\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      default: {\n        this.raise(\n          expr.start,\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          contextDescription,\n        );\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(node.argument.start, Errors.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): void {\n    if (this.match(tt.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos: number) {\n    throw this.raise(pos, Errors.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos: number) {\n    this.raise(pos, Errors.RestTrailingComma);\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport { types as ct } from \"../tokenizer/context\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n} from \"../util/identifier\";\nimport type { Pos, Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  PARAM,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\n\n/*::\nimport type { SourceType } from \"../options\";\n*/\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, Errors.RecordNoProto);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(\n        refExpressionErrors,\n        afterLeftParse,\n        refNeedsArrowPos,\n      ),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(\n        refExpressionErrors,\n        afterLeftParse,\n        refNeedsArrowPos,\n      ),\n    );\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        // If we have [Yield] production, `yield` will start a YieldExpression thus\n        // regex is allowed following. Otherwise `yield` is an identifier and regex\n        // is disallowed in tt.name.updateContext\n        this.state.exprAllowed = true;\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(tt.parenL) || this.match(tt.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(\n      refExpressionErrors,\n      refNeedsArrowPos,\n    );\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left, /* isLHS */ true);\n        refExpressionErrors.doubleProto = -1; // reset because double __proto__ is valid in assignment expression\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    refExpressionErrors: ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // FIXME: Disabling this for now since can't seem to get it to play nicely\n    // eslint-disable-next-line no-unused-vars\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    let prec = this.state.type.binop;\n    if (prec != null && (this.prodParam.hasIn || !this.match(tt._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = ((tt.logicalAND: any): { binop: number }).binop;\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\"\n        ) {\n          if (\n            this.match(tt.name) &&\n            this.state.value === \"await\" &&\n            this.prodParam.hasAwait\n          ) {\n            throw this.raise(\n              this.state.start,\n              Errors.UnexpectedAwaitAfterPipelineBody,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(this.state.start, Errors.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n      // falls through\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      op.rightAssociative ? prec - 1 : prec,\n    );\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(\n        node.argument.start,\n        Errors.UnexpectedTokenUnaryExponentiation,\n      );\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(\"await\");\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    if (\n      this.isContextual(\"module\") &&\n      this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n      !this.hasFollowingLineBreak()\n    ) {\n      return this.parseModuleExpression();\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, Errors.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, Errors.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? this.state.type.startsExpr\n        : this.state.type.startsExpr && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(\n          startPos,\n          this.hasPlugin(\"topLevelAwait\")\n            ? Errors.AwaitNotInAsyncContext\n            : Errors.AwaitNotInAsyncFunction,\n        );\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    if (!noCalls && this.eat(tt.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(tt.backQuote)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n    if (this.match(tt.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else if (optional || this.match(tt.bracketL) || this.eat(tt.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(tt.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const property = computed\n      ? this.parseExpression()\n      : this.parseMaybePrivateName(true);\n\n    if (this.isPrivateName(property)) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, Errors.SuperPrivateField);\n      }\n      this.classScope.usePrivateName(\n        this.getPrivateNameSV(property),\n        property.start,\n      );\n    }\n    node.property = property;\n\n    if (computed) {\n      this.expect(tt.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        state.maybeAsyncArrow,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n      );\n    }\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(startPos, Errors.OptionalChainingNoTemplate);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEnd === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        // todo(Babel 8): remove the if condition,\n        // moduleAttributes is renamed to importAssertions\n        if (!this.hasPlugin(\"moduleAttributes\")) {\n          this.expectPlugin(\"importAssertions\");\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(\n          node.start,\n          Errors.ImportCallArity,\n          this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n            ? \"one or two arguments\"\n            : \"one argument\",\n        );\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, Errors.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    possibleAsyncArrow: boolean,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.ImportCallArgumentTrailingComma,\n            );\n          }\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(\n          false,\n          possibleAsyncArrow ? new ExpressionErrors() : undefined,\n          possibleAsyncArrow ? { start: 0 } : undefined,\n          allowPlaceholder,\n        ),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingComma,\n    );\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    // If a division operator appears in an expression position, the\n    // tokenizer got confused, and we force it to read a regexp instead.\n    if (this.state.type === tt.slash) this.readRegexp();\n\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(this.state.lastTokStart, Errors.UnsupportedImport);\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt.name: {\n        const containsEsc = this.state.containsEsc;\n        const id = this.parseIdentifier();\n\n        if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n          if (this.match(tt._function)) {\n            const last = this.state.context.length - 1;\n            if (this.state.context[last] !== ct.functionStatement) {\n              // Since \"async\" is an identifier and normally identifiers\n              // can't be followed by expression, the tokenizer assumes\n              // that \"function\" starts a statement.\n              // Fixing it in the tokenizer would mean tracking not only the\n              // previous token (\"async\"), but also the one before to know\n              // its beforeExpr value.\n              // It's easier and more efficient to adjust the context here.\n              throw new Error(\"Internal error\");\n            }\n            this.state.context[last] = ct.functionExpression;\n\n            this.next();\n            return this.parseFunction(\n              this.startNodeAtNode(id),\n              undefined,\n              true,\n            );\n          } else if (this.match(tt.name)) {\n            // If the next token begins with \"=\", commit to parsing an async\n            // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n            // expensive full-token lookahead on this common path.)\n            if (this.lookaheadCharCode() === charCodes.equalsTo) {\n              return this.parseAsyncArrowUnaryFunction(id);\n            } else {\n              // Otherwise, treat \"async\" as an identifier and let calling code\n              // deal with the current tt.name token.\n              return id;\n            }\n          } else if (this.match(tt._do)) {\n            return this.parseDo(true);\n          }\n        }\n\n        if (canBeArrow && this.match(tt.arrow) && !this.canInsertSemicolon()) {\n          this.next();\n          return this.parseArrowExpression(\n            this.startNodeAtNode(id),\n            [id],\n            false,\n          );\n        }\n\n        return id;\n      }\n\n      case tt._do: {\n        return this.parseDo(false);\n      }\n\n      case tt.regexp: {\n        const value = this.state.value;\n        node = this.parseLiteral(value.value, \"RegExpLiteral\");\n        node.pattern = value.pattern;\n        node.flags = value.flags;\n        return node;\n      }\n\n      case tt.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case tt.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case tt.decimal:\n        return this.parseLiteral(this.state.value, \"DecimalLiteral\");\n\n      case tt.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case tt._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case tt._true:\n      case tt._false:\n        return this.parseBooleanLiteral();\n\n      case tt.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n          refExpressionErrors,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.backQuote:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(callee.start, Errors.UnsupportedBind);\n        }\n      }\n\n      case tt.hash: {\n        if (this.state.inPipeline) {\n          node = this.startNode();\n\n          if (\n            this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\"\n          ) {\n            this.raise(node.start, Errors.PrimaryTopicRequiresSmartPipeline);\n          }\n\n          this.next();\n\n          if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n            this.raise(node.start, Errors.PrimaryTopicNotAllowed);\n          }\n\n          this.registerTopicReference();\n          return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n        }\n\n        // https://tc39.es/proposal-private-fields-in-in\n        // RelationalExpression [In, Yield, Await]\n        //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n        const nextCh = this.input.codePointAt(this.state.end);\n        if (isIdentifierStart(nextCh) || nextCh === charCodes.backslash) {\n          const start = this.state.start;\n          // $FlowIgnore It'll either parse a PrivateName or throw.\n          node = (this.parseMaybePrivateName(true): N.PrivateName);\n          if (this.match(tt._in)) {\n            this.expectPlugin(\"privateIn\");\n            this.classScope.usePrivateName(\n              this.getPrivateNameSV(node),\n              node.start,\n            );\n          } else if (this.hasPlugin(\"privateIn\")) {\n            this.raise(\n              this.state.start,\n              Errors.PrivateInExpectedIn,\n              this.getPrivateNameSV(node),\n            );\n          } else {\n            throw this.unexpected(start);\n          }\n          return node;\n        }\n      }\n      // fall through\n      case tt.relational: {\n        if (this.state.value === \"<\") {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n          if (\n            isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n            lookaheadCh === charCodes.greaterThan // Fragment <>\n          ) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          }\n        }\n      }\n      // fall through\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(id: N.Expression): N.ArrowFunctionExpression {\n    const node = this.startNodeAtNode(id);\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, Errors.LineTerminatorBeforeArrow);\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    const node = this.startNode();\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.SuperNotAllowed);\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.UnexpectedSuper);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(node.start, Errors.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseBooleanLiteral(): N.BooleanLiteral {\n    const node = this.startNode();\n    node.value = this.match(tt._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(\n    isPrivateNameAllowed: boolean,\n  ): N.PrivateName | N.Identifier {\n    const isPrivate = this.match(tt.hash);\n\n    if (isPrivate) {\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, Errors.UnexpectedPrivateField);\n      }\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        node.property.start,\n        Errors.UnsupportedMetaProperty,\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrors.ImportMetaOutsideModule);\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral<T: N.Literal>(\n    value: any,\n    type: /*T[\"kind\"]*/ string,\n    startPos?: number,\n    startLoc?: Position,\n  ): T {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = { start: 0 };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma, refNeedsArrowPos.start || null);\n        if (this.match(tt.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        this.checkCommaAfterRest(charCodes.rightParenthesis);\n\n        break;\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n            refNeedsArrowPos,\n          ),\n        );\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow() &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, Errors.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.Expression): N.NewExpression {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, Errors.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, Errors.OptionalChainingNoNew);\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(this.state.start, Errors.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const elem = this.startNode();\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, Errors.InvalidEscapeSequenceTemplate);\n      }\n    }\n    elem.value = {\n      raw: this.input\n        .slice(this.state.start, this.state.end)\n        .replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value,\n    };\n    this.next();\n    elem.tail = this.match(tt.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      this.expect(tt.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(tt.braceR);\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n      if (!isPattern) {\n        // $FlowIgnore RestElement will never be returned if !isPattern\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(prop.start, Errors.InvalidRecordProperty);\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    // The tokenizer uses `braceIsBlock` to detect whether `{` starts a block statement.\n    // If `{` is a block statement, `exprAllowed` will be `true`.\n    // However the tokenizer can not handle edge cases like `0 ? a : { a : 1 } / 2`, here\n    // we update `exprAllowed` when an object-like is parsed.\n    this.state.exprAllowed = false;\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement | N.RestElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, Errors.UnsupportedPropertyDecorator);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      if (isPattern) {\n        this.next();\n        // Don't use parseRestBinding() as we only allow Identifier here.\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(tt.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n\n    if (\n      !isPattern &&\n      !isGenerator &&\n      !containsEsc &&\n      this.maybeAsyncOrAccessorProp(prop)\n    ) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, Errors.AccessorIsGenerator, keyName);\n          this.next();\n        }\n        this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoveredInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else if (this.match(tt.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else {\n        prop.value = prop.key.__clone();\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    isPrivateNameAllowed: boolean,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      // We check if it's valid for it to be a private name when we push it.\n      (prop: $FlowFixMe).key =\n        this.match(tt.num) ||\n        this.match(tt.string) ||\n        this.match(tt.bigint) ||\n        this.match(tt.decimal)\n          ? this.parseExprAtom()\n          : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (!this.isPrivateName(prop.key)) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaPos: ?number,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody and AsyncConciseBody inherit [In]\n    if (!this.match(tt.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaPos: ?number,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorPos =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? node.key.end\n                : node.start;\n            this.raise(errorPos, Errors.IllegalLanguageModeDirective);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              \"function name\",\n              BIND_OUTSIDE,\n              undefined,\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = new Set();\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        \"function parameter list\",\n        BIND_VAR,\n        allowDuplicates ? null : checkClashes,\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    refNeedsArrowPos: ?Pos,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, Errors.UnexpectedToken, \",\");\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors, refNeedsArrowPos),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, Errors.UnexpectedArgumentPlaceholder);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n        refNeedsArrowPos,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { start, type } = this.state;\n\n    if (type === tt.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n\n      // `class` and `function` keywords push function-type token context into this.context.\n      // But there is no chance to pop the context if the keyword is consumed\n      // as an identifier such as a property name.\n      const curContext = this.curContext();\n      if (\n        (type === tt._class || type === tt._function) &&\n        (curContext === ct.functionStatement ||\n          curContext === ct.functionExpression)\n      ) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      this.state.type = tt.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: number,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, Errors.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock && !this.scope.inNonArrowFunction) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(\n          startLoc,\n          Errors.AwaitBindingIdentifier,\n        );\n      }\n    }\n\n    if (\n      this.scope.inClass &&\n      !this.scope.inNonArrowFunction &&\n      word === \"arguments\"\n    ) {\n      this.raise(startLoc, Errors.ArgumentsInClass);\n      return;\n    }\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, Errors.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, Errors.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      node.start,\n      Errors.AwaitExpressionFormalParameter,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(node.start, Errors.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    return (\n      this.hasPrecedingLineBreak() ||\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      this.match(tt.plusMin) ||\n      this.match(tt.parenL) ||\n      this.match(tt.bracketL) ||\n      this.match(tt.backQuote) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      this.match(tt.regexp) ||\n      this.match(tt.slash) ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && this.match(tt.modulo))\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      node.start,\n      Errors.YieldInParameter,\n    );\n\n    this.next();\n    if (\n      this.match(tt.semi) ||\n      (!this.match(tt.star) && !this.state.type.startsExpr) ||\n      this.hasPrecedingLineBreak()\n    ) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(tt.star);\n      node.argument = this.parseMaybeAssign();\n    }\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartPos: number) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(leftStartPos, Errors.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(\n    childExpression: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n\n    return this.parseSmartPipelineBodyInStyle(\n      childExpression,\n      startPos,\n      startLoc,\n    );\n  }\n\n  checkSmartPipelineBodyEarlyErrors(\n    childExpression: N.Expression,\n    startPos: number,\n  ): void {\n    if (this.match(tt.arrow)) {\n      // If the following token is invalidly `=>`, then throw a human-friendly error\n      // instead of something like 'Unexpected token, expected \";\"'.\n      throw this.raise(this.state.start, Errors.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, Errors.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpression: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, Errors.PipelineTopicUnused);\n      }\n      bodyNode.expression = childExpression;\n    }\n    return this.finishNode(\n      bodyNode,\n      isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\",\n    );\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // Enable topic references from outer contexts within smart pipeline bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicPermittingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // Disable topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicForbiddingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Disable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 0,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a primary topic reference (`#`) within the current\n  // topic context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport {\n  isIdentifierChar,\n  isIdentifierStart,\n  keywordRelationalOperator,\n} from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) file.tokens = this.tokens;\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        // $FlowIssue\n        this.raise(pos, Errors.ModuleExportUndefined, name);\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const expr = stmt.expression;\n\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n\n    directive.value = this.finishNodeAt(\n      directiveLiteral,\n      \"DirectiveLiteral\",\n      expr.end,\n      expr.loc.end,\n    );\n\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    if (nextCh === charCodes.leftSquareBracket) return true;\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n      case tt._continue:\n        // $FlowFixMe\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, Errors.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, Errors.SloppyFunction);\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, Errors.UnexpectedLexicalDeclaration);\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(this.state.start, Errors.UnexpectedImportExport);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(\n              this.state.start,\n              Errors.AsyncFunctionInSingleStatementContext,\n            );\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      starttype === tt.name &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrors.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, Errors.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ): N.BreakStatement | N.ContinueStatement {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ) {\n    const isBreak = keyword === \"break\";\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(node.start, Errors.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = -1;\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(\"let\");\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(\"of\")) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithUnescapedName =\n      this.match(tt.name) && !this.state.containsEsc;\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(\"of\");\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(init.start, Errors.ForOfLet);\n      } else if (\n        // `for await (async of []);` is allowed.\n        awaitAt === -1 &&\n        startsWithUnescapedName &&\n        init.type === \"Identifier\" &&\n        init.name === \"async\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(init.start, Errors.ForOfAsync);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.toAssignable(init, /* isLHS */ true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, Errors.IllegalReturn);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.MultipleDefaultsInSwitch,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, Errors.NewlineAfterThrow);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n      this.scope.exit();\n\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, Errors.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(this.state.start, Errors.StrictWith);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, Errors.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: number,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        init.start,\n        Errors.ForInOfLoopInitializer,\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, Errors.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(\"of\"))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.raise(\n              this.state.lastTokEnd,\n              Errors.DeclarationMissingInitializer,\n              \"Const declarations\",\n            );\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(\"of\")))\n        ) {\n          this.raise(\n            this.state.lastTokEnd,\n            Errors.DeclarationMissingInitializer,\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      \"variable declaration\",\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(this.state.start, Errors.GeneratorInSingleStatementContext);\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || this.match(tt.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, Errors.DecoratorSemicolon);\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(member.start, Errors.DecoratorConstructor);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, Errors.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassMethod> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateMethod> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n\n      if (this.isPrivateName(method.key)) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, Errors.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassElementName(member);\n    const isPrivate = this.isPrivateName(key);\n    // Check the key is not a computed expression or string literal.\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, Errors.DuplicateConstructor);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, Errors.OverrideOnConstructor);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isSimple &&\n      key.name === \"async\" &&\n      !containsEsc &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (this.isPrivateName(method.key)) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isSimple &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !containsEsc &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      this.parseClassElementName(publicMethod);\n\n      if (this.isPrivateName(method.key)) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAccessor);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const key = this.parsePropertyName(member, /* isPrivateNameAllowed */ true);\n\n    if (\n      !member.computed &&\n      member.static &&\n      ((key: $FlowSubtype<N.Identifier>).name === \"prototype\" ||\n        (key: $FlowSubtype<N.StringLiteral>).value === \"prototype\")\n    ) {\n      this.raise(key.start, Errors.StaticPrototype);\n    }\n\n    if (\n      this.isPrivateName(key) &&\n      this.getPrivateNameSV(key) === \"constructor\"\n    ) {\n      this.raise(key.start, Errors.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(member.start, Errors.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(prop.key.start, Errors.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.start,\n    );\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/proposal-class-fields/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-Initializer\n  parseInitializer(node: N.ClassProperty | N.ClassPrivateProperty): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (this.match(tt.name)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, Errors.MissingClassName);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n\n      node.source = null;\n      node.declaration = null;\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    } else if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorBeforeExport);\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(this.state.start, Errors.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    if (this.match(tt.name)) {\n      const value = this.state.value;\n      if ((value === \"async\" && !this.state.containsEsc) || value === \"let\") {\n        return false;\n      }\n      if (\n        (value === \"type\" || value === \"interface\") &&\n        !this.state.containsEsc\n      ) {\n        const l = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (l.type === tt.name && l.value !== \"from\") ||\n          l.type === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (this.match(tt.name) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    if (this.match(tt.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, Errors.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return (\n      this.state.type.keyword === \"var\" ||\n      this.state.type.keyword === \"const\" ||\n      this.state.type.keyword === \"function\" ||\n      this.state.type.keyword === \"class\" ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(declaration.start, Errors.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportedName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type === \"StringLiteral\") {\n              this.raise(\n                specifier.start,\n                Errors.ExportBindingIsString,\n                local.value,\n                exportedName,\n              );\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, Errors.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(\n        node.start,\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        name,\n      );\n    }\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      node.exported = this.eatContextual(\"as\")\n        ? this.parseModuleExportName()\n        : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseLiteral<N.StringLiteral>(\n        this.state.value,\n        \"StringLiteral\",\n      );\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(\n          result.start,\n          Errors.ModuleExportNameHasLoneSurrogate,\n          surrogate[0].charCodeAt(0).toString(16),\n        );\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    }\n    // todo(Babel 8): remove module attributes support\n    else {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return this.match(tt.name);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      if (this.match(tt.string)) {\n        node.key = this.parseLiteral<N.StringLiteral>(keyName, \"StringLiteral\");\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      // for now we are only allowing `type` as the only allowed module attribute\n      if (keyName !== \"type\") {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributeDifferentFromType,\n          keyName,\n        );\n      }\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          keyName,\n        );\n      }\n      attrNames.add(keyName);\n\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseLiteral<N.StringLiteral>(\n        this.state.value,\n        \"StringLiteral\",\n      );\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributeDifferentFromType,\n          node.key.name,\n        );\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          node.key.name,\n        );\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(this.state.start, Errors.DestructureNamedImport);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(node: N.ImportDeclaration): void {\n    const specifier = this.startNode();\n    specifier.imported = this.parseModuleExportName();\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (imported.type === \"StringLiteral\") {\n        throw this.raise(\n          specifier.start,\n          Errors.ImportBindingIsString,\n          imported.value,\n        );\n      }\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = imported.__clone();\n    }\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { types as tokTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nexport { tokTypes };\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","name","options","token","set","createBinop","types","num","bigint","decimal","regexp","string","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","isWhitespace","Position","line","col","column","SourceLocation","start","end","filename","identifierName","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","plugins","has","getPluginOption","plugin","get","last","stack","length","CommentsParser","addComment","comment","loc","state","trailingComments","push","leadingComments","adjustCommentsAfterTrailingComma","node","elements","takeAllComments","lastElement","i","j","commentPreviousNode","splice","newTrailingComments","leadingComment","undefined","processComment","type","body","commentStack","firstChild","lastChild","lastInStack","pop","properties","arguments","slice","innerComments","firstTrailingCommentIndex","findIndex","ErrorCodes","Object","freeze","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","messages","templates","keys","forEach","reasonCode","ParserError","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","params","raiseWithData","raiseOverwrite","message","replace","_","errorRecovery","errors","error","_raise","data","errorTemplate","errorContext","err","isLookahead","superClass","estreeParseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","estreeParseBigIntLiteral","value","bigInt","BigInt","String","estreeParseDecimalLiteral","parseLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","isValidDirective","parenthesized","stmtToDirective","addExtra","parseBlockBody","args","directiveStatements","directives","map","d","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parseExprAtom","refExpressionErrors","tt","parseMaybePrivateName","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","startPos","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","toAssignable","isLHS","toAssignableObjectExpressionProp","key","Errors","finishCallExpression","optional","callee","toReferencedArguments","parseExport","exported","specifiers","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","TokContext","isExpr","preserveSpace","override","braceStatement","braceExpression","recordExpression","templateQuasi","parenStatement","parenExpression","p","readTmplToken","functionExpression","functionStatement","context","exprAllowed","out","curContext","prevType","allowed","isIterator","braceIsBlock","statementParens","hasPrecedingLineBreak","b_stat","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","keywordRelationalOperator","isIteratorStart","current","next","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScope","allowSuper","currentThisScope","inClass","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","indexOf","checkLocalExport","FlowScope","declareFunctions","FlowScopeHandler","includes","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","getScopeHandler","shouldParseTypes","shouldParseEnums","finishToken","val","matches","Error","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloPos","expectContextual","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","isRelational","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","this","returnType","typeAnnotation","resetEndLocation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","unexpected","flowParseTypeAnnotatableIdentifier","bodyNode","parseImport","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStart","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","property","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","canInsertSemicolon","elementType","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","refNeedsArrowPos","result","tryParse","failState","clone","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","isAssignable","toAssignableList","trailingComma","checkParams","parse","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","getTokenFromCode","charCodeAt","finishOp","readWord","isBinding","element","operator","exprList","trailingCommaPos","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","maybeInArrowParameters","checkLVal","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyName","isPrivateNameAllowed","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","contextDescription","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentLoc","firstIdent","parseModuleExportName","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","tc","j_oTag","j_expr","abort","arrowExpression","resetStartLocationFromNode","maybeUnwrapTypeCastExpression","aborted","async","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","file","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","parseBooleanLiteral","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","add","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","nextTokenStart","afterNext","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","chunkStart","ch","jsxReadEntity","jsxReadNewLine","normalizeCRLF","curLine","jsxReadString","quote","str","count","entity","substr","fromCodePoint","parseInt","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","newNode","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","attributes","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","inPropertyName","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","modifier","tsIsIdentifier","tsTokenCanFollowModifier","isLiteralPropertyName","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseIdentifierName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","isLineTerminator","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","lookaheadCharCode","parseMaybeUnary","tsParseArrayTypeOrHigher","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","containsEsc","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","prodParam","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","hasFollowingLineBreak","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsIsDeclarationStart","parseAssignableListItem","decorators","parseAccessModifier","elt","pp","parameter","bodilessType","isAmbientContext","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","parseStatementContent","tsHasSomeModifiers","modifiers","some","invalidModifersForStaticBlocks","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","inAbstractClass","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","resetStartLocation","parseClassPropertyAnnotation","definite","typeCast","ct","toAssignableParenthesizedExpression","parseMaybeDecoratorArguments","checkCommaAfterRest","readToken_lt_gt","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","placeholder","PlaceHolderErrors","ClassNameIsRequired","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","expectPlugin","isUnparsedContextual","startsWith","nextTokenStartSince","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStart","identifier","Array","isArray","option","PIPELINE_PROPOSALS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","join","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceType","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","strictMode","ranges","tokens","createParenthesizedExpressions","getOptions","opts","State","potentialArrowAt","inPipeline","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","comments","strictErrors","exportedIdentifiers","tokensLength","curPosition","skipArrays","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","ParserErrors","pushToken","checkKeywordEscapes","old","curr","skip","setStrict","clear","skipSpace","codePointAt","pushComment","block","text","skipLineComment","startSkip","loop","readToken_numberSign","readToken_interpreter","nextPos","readToken_dot","readNumber","readToken_slash","readRegexp","width","readToken_caret","readToken_plus_min","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","escaped","charAt","content","mods","char","charCode","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","octalStr","octal","n","readWord1","escStart","identifierCheck","esc","keywordTypes","parent","update","ClassScope","privateNames","loneAccessors","ClassScopeHandler","oldClassScope","from","declarePrivateName","classScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","usePrivateName","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","UtilParser","op","nameStart","nameEnd","allowAsi","messageOrType","missingPlugin","expectOnePlugin","names","fn","oldState","abortSignal","checkExpressionErrors","andThrow","shorthandAssign","doubleProto","initializeScopes","oldLabels","oldExportedIdentifiers","oldInModule","oldScope","oldProdParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","ExpressionErrors","Node","parser","range","NodeUtils","locationNode","unwrapParenthesizedExpression","LValParser","isLast","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","parseSpread","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","parseDecorator","checkClashes","disallowLetBinding","strictModeChanged","elem","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","parseModuleExpression","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","possibleAsyncArrow","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","parseExprListItem","parseSuper","parseImportMetaProperty","parseFunction","parseAsyncArrowUnaryFunction","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","nextCh","lookaheadCh","isPrivate","meta","parseMetaProperty","propertyName","SourceTypeModuleErrors","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","create","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","oldInPropertyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","reservedTest","delegate","childExpression","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","isSimpleReference","topicReferenceWasUsedInCurrentTopicContext","callback","outerContextTopicState","withTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","StatementParser","interpreter","parseInterpreterDirective","isLetKeyword","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","declarations","parseForIn","startsWithUnescapedName","isForOf","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","isSimple","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","l","hasFrom","nextAfterFrom","assertions","maybeParseImportAssertions","checkNames","isDefault","isFrom","exportedName","nodes","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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"}