{"version":3,"sources":["../src/object.js"],"names":["ReactPropTypeLocationNames","prop","context","childContext","object","props","propName","componentName","location","propFullName","propValue","locationName","TypeError","isRequired","objectRequired","rest"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;;;AAKA,IAAMA,0BAA0B,GAAG;AACjCC,EAAAA,IAAI,EAAE,MAD2B;AAEjCC,EAAAA,OAAO,EAAE,SAFwB;AAGjCC,EAAAA,YAAY,EAAE;AAHmB,CAAnC;;AAMA,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,QAAvB,EAAiCC,aAAjC,EAAgDC,QAAhD,EAA0DC,YAA1D,EAAwE;AAAA,MAClDC,SADkD,GACpCL,KADoC,CAC7DC,QAD6D;;AAEtE,MAAII,SAAS,IAAI,IAAjB,EAAuB;AACrB,WAAO,IAAP;AACD;;AAED,MAAI,+BAAcA,SAAd,CAAJ,EAA8B;AAC5B,WAAO,IAAP;AACD;;AACD,MAAMC,YAAY,GAAGX,0BAA0B,CAACQ,QAAD,CAA1B,IAAwCA,QAA7D;AACA,SAAO,IAAII,SAAJ,mBAAyBD,YAAzB,eAA2CF,YAA3C,wBAAuE,wBAAOC,SAAP,CAAvE,4BAA4GH,aAA5G,2BAAP;AACD;;AACDH,MAAM,CAACS,UAAP,GAAoB,SAASC,cAAT,CAClBT,KADkB,EAElBC,QAFkB,EAGlBC,aAHkB,EAIlBC,QAJkB,EAKlBC,YALkB,EAOlB;AAAA,MACoBC,SADpB,GACkCL,KADlC,CACSC,QADT;;AAEA,MAAII,SAAS,IAAI,IAAjB,EAAuB;AACrB,QAAMC,YAAY,GAAGX,0BAA0B,CAACQ,QAAD,CAA1B,IAAwCA,QAA7D;AACA,WAAO,IAAII,SAAJ,eAAqBD,YAArB,eAAuCF,YAAvC,yCAAoFF,aAApF,kCAA2HG,SAA3H,QAAP;AACD;;AALD,oCADGK,IACH;AADGA,IAAAA,IACH;AAAA;;AAMA,SAAOX,MAAM,MAAN,UAAOC,KAAP,EAAcC,QAAd,EAAwBC,aAAxB,EAAuCC,QAAvC,EAAiDC,YAAjD,SAAkEM,IAAlE,EAAP;AACD,CAdD;;eAgBe;AAAA,SAAM,+BAAcX,MAAd,EAAsB,QAAtB,CAAN;AAAA,C","sourcesContent":["import isPlainObject from './helpers/isPlainObject';\nimport typeOf from './helpers/typeOf';\nimport wrapValidator from './helpers/wrapValidator';\n\n/*\n  code adapted from https://github.com/facebook/react/blob/14156e56b9cf18ac86963185c5af4abddf3ff811/src/isomorphic/classic/types/ReactPropTypes.js#L202-L206\n  so that it can be called outside of React's normal PropType flow\n*/\n\nconst ReactPropTypeLocationNames = {\n  prop: 'prop',\n  context: 'context',\n  childContext: 'child context',\n};\n\nfunction object(props, propName, componentName, location, propFullName) {\n  const { [propName]: propValue } = props;\n  if (propValue == null) {\n    return null;\n  }\n\n  if (isPlainObject(propValue)) {\n    return null;\n  }\n  const locationName = ReactPropTypeLocationNames[location] || location;\n  return new TypeError(`Invalid ${locationName} \\`${propFullName}\\` of type \\`${typeOf(propValue)}\\` supplied to \\`${componentName}\\`, expected \\`object\\`.`);\n}\nobject.isRequired = function objectRequired(\n  props,\n  propName,\n  componentName,\n  location,\n  propFullName,\n  ...rest\n) {\n  const { [propName]: propValue } = props;\n  if (propValue == null) {\n    const locationName = ReactPropTypeLocationNames[location] || location;\n    return new TypeError(`The ${locationName} \\`${propFullName}\\` is marked as required in \\`${componentName}\\`, but its value is \\`${propValue}\\`.`);\n  }\n  return object(props, propName, componentName, location, propFullName, ...rest);\n};\n\nexport default () => wrapValidator(object, 'object');\n"],"file":"object.js"}