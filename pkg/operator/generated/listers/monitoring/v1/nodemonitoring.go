// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/GoogleCloudPlatform/prometheus-engine/pkg/operator/apis/monitoring/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodeMonitoringLister helps list NodeMonitorings.
// All objects returned here must be treated as read-only.
type NodeMonitoringLister interface {
	// List lists all NodeMonitorings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NodeMonitoring, err error)
	// NodeMonitorings returns an object that can list and get NodeMonitorings.
	NodeMonitorings(namespace string) NodeMonitoringNamespaceLister
	NodeMonitoringListerExpansion
}

// nodeMonitoringLister implements the NodeMonitoringLister interface.
type nodeMonitoringLister struct {
	indexer cache.Indexer
}

// NewNodeMonitoringLister returns a new NodeMonitoringLister.
func NewNodeMonitoringLister(indexer cache.Indexer) NodeMonitoringLister {
	return &nodeMonitoringLister{indexer: indexer}
}

// List lists all NodeMonitorings in the indexer.
func (s *nodeMonitoringLister) List(selector labels.Selector) (ret []*v1.NodeMonitoring, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodeMonitoring))
	})
	return ret, err
}

// NodeMonitorings returns an object that can list and get NodeMonitorings.
func (s *nodeMonitoringLister) NodeMonitorings(namespace string) NodeMonitoringNamespaceLister {
	return nodeMonitoringNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodeMonitoringNamespaceLister helps list and get NodeMonitorings.
// All objects returned here must be treated as read-only.
type NodeMonitoringNamespaceLister interface {
	// List lists all NodeMonitorings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.NodeMonitoring, err error)
	// Get retrieves the NodeMonitoring from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.NodeMonitoring, error)
	NodeMonitoringNamespaceListerExpansion
}

// nodeMonitoringNamespaceLister implements the NodeMonitoringNamespaceLister
// interface.
type nodeMonitoringNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodeMonitorings in the indexer for a given namespace.
func (s nodeMonitoringNamespaceLister) List(selector labels.Selector) (ret []*v1.NodeMonitoring, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodeMonitoring))
	})
	return ret, err
}

// Get retrieves the NodeMonitoring from the indexer for a given namespace and name.
func (s nodeMonitoringNamespaceLister) Get(name string) (*v1.NodeMonitoring, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("nodemonitoring"), name)
	}
	return obj.(*v1.NodeMonitoring), nil
}
