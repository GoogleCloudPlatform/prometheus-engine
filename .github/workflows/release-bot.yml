# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Release bot

on:
  workflow_call:
    inputs:
      branch_name:
        required: true
        type: string
      commit_sha:
        required: true
        type: string
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: googlecloudplatform/gmp/hermetic-build
  BRANCH_NAME: ${{ inputs.branch_name }} 
concurrency: 
  group: ${{inputs.branch_name}}
  cancel-in-progress: true
jobs:
  auto_tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    concurrency: 
      group: ${{inputs.commit_sha}}
      cancel-in-progress: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.BRANCH_NAME }}
      - name: Setup git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      - name: Get the other commit from the merge if there is one
        id: merge
        run: |
          parents=$(git log --pretty=%P -n 1 ${{ inputs.commit_sha }})
          IFS=' ' read -r parent1 parent2 <<< "$parents"
          echo "sha=$parent2" >> $GITHUB_OUTPUT
      - name: Check if commit is tagged
        if: ${{ steps.merge.outputs.sha != '' }}
        id: check
        run: |
          TAG=$(git tag --points-at ${{ steps.merge.outputs.sha }} | grep releasebot || true)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
      - name: Push tag
        if: ${{ steps.check.outputs.tag != '' }}
        run: |
          set -ex
          NEW_TAG=$(echo "${{ steps.check.outputs.tag }}" | awk '{gsub(/releasebot\//, ""); print}')
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"
          echo "::notice::Successfully created and pushed new tag: '$NEW_TAG'."
    
  build_and_push_image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.create_tag.outputs.image_tag }}
    steps:
      - name: Get docker tag
        id: create_tag
        run: |
          TAG=$(echo "${{ env.BRANCH_NAME }}" | awk '{gsub(/\//, "-"); print}')
          echo "image_tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG" >> $GITHUB_OUTPUT
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          file: ./hack/Dockerfile
          target: hermetic
          push: true
          tags: ${{ steps.create_tag.outputs.image_tag }}
          cache-from: type=registry,ref=${{ steps.create_tag.outputs.image_tag }}-cache
          cache-to: type=registry,ref=${{ steps.create_tag.outputs.image_tag }}-cache,mode=max
  prepare_rc:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    needs:
      - build_and_push_image
      - auto_tag
    outputs:
      full_rc_version: ${{ steps.prepare.outputs.full_rc_version }}
      bot_branch: ${{ steps.push.outputs.bot_branch }}
    steps:
      - name: Checkout release
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH_NAME }}
          path: release_branch
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          path: main_branch
      - name: Set up Git Identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
        working-directory: ./release_branch
      - name: Create RC Version and Update Files
        id: prepare
        working-directory: ./main_branch
        run: |
          alias yq=go tool yq
          go run ./hack/prepare_rc -branch ${{ env.BRANCH_NAME }} -dir ../release_branch
      - name: Regen files
        working-directory: ./release_branch
        # Workflows can't edit workflows. Better to create PR and let tests fail.
        run: |
          mv .github ..
          make regen CACHE_IMAGE_FROM=${{ needs.build_and_push_image.outputs.image_tag }}-cache
          mv ../.github .
      - name: Commit and Tag Release Candidate
        if: steps.prepare.outputs.full_rc_version != ''
        id: push
        working-directory: ./release_branch
        run: |
          set -e
          BOT_BRANCH=$(echo "${{ env.BRANCH_NAME }}" | awk '{gsub(/release/, "releasebot"); print}')
          echo "bot_branch=$BOT_BRANCH" >> $GITHUB_OUTPUT
          git checkout -b "$BOT_BRANCH"
          git add .
          RC="${{ steps.prepare.outputs.full_rc_version }}"
          git commit -as -m"chore: prepare for $RC release"
          git tag -a "releasebot/$RC" -m "releasebot release candidate $RC"
          git push -f origin "$BOT_BRANCH" "releasebot/$RC"
  manage_pr:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    needs:
      prepare_rc
    steps:
    - name: Checkout main
      uses: actions/checkout@v4
      with:
        ref: ${{needs.prepare_rc.outputs.bot_branch}}
    - name: Manage Release PR
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        BOT_BRANCH=${{needs.prepare_rc.outputs.bot_branch}}
        RC=${{ needs.prepare_rc.outputs.full_rc_version }}
        EXISTING_PR_NUMBER=$(gh pr list \
          --base ${{ env.BRANCH_NAME }} \
          --head $BOT_BRANCH \
          --state open \
          --json number \
          -q '.[0].number // empty')
        
        if [[ -z "$EXISTING_PR_NUMBER" ]]; then
          gh pr create \
            --base ${{ env.BRANCH_NAME }} \
            --head $BOT_BRANCH \
            --title "chore: prepare for $RC release" \
            --body "Beep boop. Merging activates deployment. A fresh PR appears on merge. Boop beep."
        fi
